
StopWatch_TimeClock_OOP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00001148  000011dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001148  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  0080013c  0080013c  00001218  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002570  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001345  00000000  00000000  00003b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001536  00000000  00000000  00004e79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f0  00000000  00000000  000063b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000afd  00000000  00000000  000069a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d8b  00000000  00000000  0000749d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  00008228  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	7b c0       	rjmp	.+246    	; 0x11c <__vector_9>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e4       	ldi	r30, 0x48	; 72
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 33       	cpi	r26, 0x3C	; 60
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	ac e3       	ldi	r26, 0x3C	; 60
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 36       	cpi	r26, 0x66	; 102
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	f3 d4       	rcall	.+2534   	; 0xaaa <main>
      c4:	0c 94 a2 08 	jmp	0x1144	; 0x1144 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <__vector_16>:
﻿#include "apMain.h"

ISR(TIMER0_OVF_vect) // overflow interrupt 조건
{
      ca:	1f 92       	push	r1
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	0b b6       	in	r0, 0x3b	; 59
      d6:	0f 92       	push	r0
      d8:	2f 93       	push	r18
      da:	3f 93       	push	r19
      dc:	4f 93       	push	r20
      de:	5f 93       	push	r21
      e0:	6f 93       	push	r22
      e2:	7f 93       	push	r23
      e4:	8f 93       	push	r24
      e6:	9f 93       	push	r25
      e8:	af 93       	push	r26
      ea:	bf 93       	push	r27
      ec:	ef 93       	push	r30
      ee:	ff 93       	push	r31
	FND_ISR_Process();
      f0:	3b d4       	rcall	.+2166   	; 0x968 <FND_ISR_Process>
	TCNT0 = 130; // 1ms 주기마다 발생하도록 하는 조건
      f2:	82 e8       	ldi	r24, 0x82	; 130
      f4:	82 bf       	out	0x32, r24	; 50
}
      f6:	ff 91       	pop	r31
      f8:	ef 91       	pop	r30
      fa:	bf 91       	pop	r27
      fc:	af 91       	pop	r26
      fe:	9f 91       	pop	r25
     100:	8f 91       	pop	r24
     102:	7f 91       	pop	r23
     104:	6f 91       	pop	r22
     106:	5f 91       	pop	r21
     108:	4f 91       	pop	r20
     10a:	3f 91       	pop	r19
     10c:	2f 91       	pop	r18
     10e:	0f 90       	pop	r0
     110:	0b be       	out	0x3b, r0	; 59
     112:	0f 90       	pop	r0
     114:	0f be       	out	0x3f, r0	; 63
     116:	0f 90       	pop	r0
     118:	1f 90       	pop	r1
     11a:	18 95       	reti

0000011c <__vector_9>:

ISR(TIMER2_COMP_vect) // CTC interrupt
{
     11c:	1f 92       	push	r1
     11e:	0f 92       	push	r0
     120:	0f b6       	in	r0, 0x3f	; 63
     122:	0f 92       	push	r0
     124:	11 24       	eor	r1, r1
     126:	0b b6       	in	r0, 0x3b	; 59
     128:	0f 92       	push	r0
     12a:	2f 93       	push	r18
     12c:	3f 93       	push	r19
     12e:	4f 93       	push	r20
     130:	5f 93       	push	r21
     132:	6f 93       	push	r22
     134:	7f 93       	push	r23
     136:	8f 93       	push	r24
     138:	9f 93       	push	r25
     13a:	af 93       	push	r26
     13c:	bf 93       	push	r27
     13e:	ef 93       	push	r30
     140:	ff 93       	push	r31
	StopWatch_incMilisec();
     142:	e4 d1       	rcall	.+968    	; 0x50c <StopWatch_incMilisec>
	TimeClock_incMilisec();
     144:	5c d2       	rcall	.+1208   	; 0x5fe <TimeClock_incMilisec>
     146:	ff 91       	pop	r31
}
     148:	ef 91       	pop	r30
     14a:	bf 91       	pop	r27
     14c:	af 91       	pop	r26
     14e:	9f 91       	pop	r25
     150:	8f 91       	pop	r24
     152:	7f 91       	pop	r23
     154:	6f 91       	pop	r22
     156:	5f 91       	pop	r21
     158:	4f 91       	pop	r20
     15a:	3f 91       	pop	r19
     15c:	2f 91       	pop	r18
     15e:	0f 90       	pop	r0
     160:	0b be       	out	0x3b, r0	; 59
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <apMain_init>:
     16c:	11 d0       	rcall	.+34     	; 0x190 <Listener_init>

void apMain_init()
{
	Listener_init();
	Presenter_init();
     16e:	93 d0       	rcall	.+294    	; 0x296 <Presenter_init>
	StopWatch_init();
     170:	c2 d1       	rcall	.+900    	; 0x4f6 <StopWatch_init>
	TimeClock_init();
     172:	37 d2       	rcall	.+1134   	; 0x5e2 <TimeClock_init>
     174:	c1 d4       	rcall	.+2434   	; 0xaf8 <TIM0_init>
	
	TIM0_init();
     176:	c9 d4       	rcall	.+2450   	; 0xb0a <TIM2_init>
	TIM2_init();
     178:	78 94       	sei
	sei();
	
	Model_setStopWatchStateData(STOP);
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	7d d0       	rcall	.+250    	; 0x278 <Model_setStopWatchStateData>
     17e:	80 e0       	ldi	r24, 0x00	; 0
	Model_setTimeModeStateData(TIMECLOCK);
     180:	87 d0       	rcall	.+270    	; 0x290 <Model_setTimeModeStateData>
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	7f c0       	rjmp	.+254    	; 0x284 <Model_setTimeClockDispStateData>
	Model_setTimeClockDispStateData(HOUR_MIN);
     186:	08 95       	ret

00000188 <apMain_excute>:
     188:	5b d0       	rcall	.+182    	; 0x240 <Listener_checkEvent>
     18a:	0c d2       	rcall	.+1048   	; 0x5a4 <StopWatch_run>
     18c:	80 c2       	rjmp	.+1280   	; 0x68e <TimeClock_run>

void apMain_excute()
{
	Listener_checkEvent();
	StopWatch_run();
	TimeClock_run();
     18e:	08 95       	ret

00000190 <Listener_init>:
     190:	20 e0       	ldi	r18, 0x00	; 0

button_t btnRunStop, btnReset, btnMode, btnDispMode;

void Listener_init()
{
	Button_init(&btnRunStop, &DDRA, &PINA, 0);
     192:	49 e3       	ldi	r20, 0x39	; 57
     194:	50 e0       	ldi	r21, 0x00	; 0
     196:	6a e3       	ldi	r22, 0x3A	; 58
     198:	70 e0       	ldi	r23, 0x00	; 0
     19a:	86 e5       	ldi	r24, 0x56	; 86
     19c:	91 e0       	ldi	r25, 0x01	; 1
     19e:	86 d2       	rcall	.+1292   	; 0x6ac <Button_init>
	Button_init(&btnReset, &DDRA, &PINA, 1);
     1a0:	21 e0       	ldi	r18, 0x01	; 1
     1a2:	49 e3       	ldi	r20, 0x39	; 57
     1a4:	50 e0       	ldi	r21, 0x00	; 0
     1a6:	6a e3       	ldi	r22, 0x3A	; 58
     1a8:	70 e0       	ldi	r23, 0x00	; 0
     1aa:	80 e5       	ldi	r24, 0x50	; 80
     1ac:	91 e0       	ldi	r25, 0x01	; 1
     1ae:	7e d2       	rcall	.+1276   	; 0x6ac <Button_init>
	Button_init(&btnMode, &DDRA, &PINA, 2);
     1b0:	22 e0       	ldi	r18, 0x02	; 2
     1b2:	49 e3       	ldi	r20, 0x39	; 57
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	6a e3       	ldi	r22, 0x3A	; 58
     1b8:	70 e0       	ldi	r23, 0x00	; 0
     1ba:	8c e5       	ldi	r24, 0x5C	; 92
     1bc:	91 e0       	ldi	r25, 0x01	; 1
     1be:	76 d2       	rcall	.+1260   	; 0x6ac <Button_init>
	Button_init(&btnDispMode, &DDRA, &PINA, 3);
     1c0:	23 e0       	ldi	r18, 0x03	; 3
     1c2:	49 e3       	ldi	r20, 0x39	; 57
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	6a e3       	ldi	r22, 0x3A	; 58
     1c8:	70 e0       	ldi	r23, 0x00	; 0
     1ca:	8a e4       	ldi	r24, 0x4A	; 74
     1cc:	91 e0       	ldi	r25, 0x01	; 1
     1ce:	6e c2       	rjmp	.+1244   	; 0x6ac <Button_init>
     1d0:	08 95       	ret

000001d2 <Listener_stopWatchEvent>:
}

void Listener_stopWatchEvent()
{
	uint8_t stopWatchState;
	stopWatchState = Model_getStopWatchStateData();
     1d2:	4f d0       	rcall	.+158    	; 0x272 <Model_getStopWatchStateData>
	
	switch(stopWatchState) // event 처리
     1d4:	81 30       	cpi	r24, 0x01	; 1
     1d6:	99 f0       	breq	.+38     	; 0x1fe <Listener_stopWatchEvent+0x2c>
     1d8:	18 f0       	brcs	.+6      	; 0x1e0 <Listener_stopWatchEvent+0xe>
     1da:	82 30       	cpi	r24, 0x02	; 2
     1dc:	c1 f0       	breq	.+48     	; 0x20e <Listener_stopWatchEvent+0x3c>
     1de:	08 95       	ret
	{
		case STOP:
		if (Button_getState(&btnRunStop)==ACT_RELEASED)
     1e0:	86 e5       	ldi	r24, 0x56	; 86
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	70 d2       	rcall	.+1248   	; 0x6c6 <Button_getState>
     1e6:	82 30       	cpi	r24, 0x02	; 2
     1e8:	19 f4       	brne	.+6      	; 0x1f0 <Listener_stopWatchEvent+0x1e>
		{
			stopWatchState = RUN;
			Model_setStopWatchStateData(stopWatchState);
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	45 c0       	rjmp	.+138    	; 0x278 <Model_setStopWatchStateData>
     1ee:	08 95       	ret
		}
		else if (Button_getState(&btnReset)==ACT_RELEASED)
     1f0:	80 e5       	ldi	r24, 0x50	; 80
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	68 d2       	rcall	.+1232   	; 0x6c6 <Button_getState>
     1f6:	82 30       	cpi	r24, 0x02	; 2
     1f8:	61 f4       	brne	.+24     	; 0x212 <Listener_stopWatchEvent+0x40>
		{
			stopWatchState = RESET;
			Model_setStopWatchStateData(stopWatchState);
     1fa:	3e c0       	rjmp	.+124    	; 0x278 <Model_setStopWatchStateData>
     1fc:	08 95       	ret
		}
		break;
		
		case RUN:
		if (Button_getState(&btnRunStop)==ACT_RELEASED)
     1fe:	86 e5       	ldi	r24, 0x56	; 86
     200:	91 e0       	ldi	r25, 0x01	; 1
     202:	61 d2       	rcall	.+1218   	; 0x6c6 <Button_getState>
     204:	82 30       	cpi	r24, 0x02	; 2
		{
			stopWatchState = STOP;
			Model_setStopWatchStateData(stopWatchState);
     206:	29 f4       	brne	.+10     	; 0x212 <Listener_stopWatchEvent+0x40>
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	36 c0       	rjmp	.+108    	; 0x278 <Model_setStopWatchStateData>
     20c:	08 95       	ret
		}
		break;
		
		case RESET:
		stopWatchState = STOP;
		Model_setStopWatchStateData(stopWatchState);
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	33 c0       	rjmp	.+102    	; 0x278 <Model_setStopWatchStateData>
     212:	08 95       	ret

00000214 <Listener_timeClockEvent>:
     214:	34 d0       	rcall	.+104    	; 0x27e <Model_getTimeClockDispStateData>
void Listener_timeClockEvent()
{
	uint8_t timeClockState;
	timeClockState = Model_getTimeClockDispStateData();
	
	switch(timeClockState) // event 처리
     216:	88 23       	and	r24, r24
     218:	19 f0       	breq	.+6      	; 0x220 <Listener_timeClockEvent+0xc>
     21a:	81 30       	cpi	r24, 0x01	; 1
     21c:	49 f0       	breq	.+18     	; 0x230 <Listener_timeClockEvent+0x1c>
     21e:	08 95       	ret
	{
		case HOUR_MIN:
		if (Button_getState(&btnDispMode)==ACT_RELEASED)
     220:	8a e4       	ldi	r24, 0x4A	; 74
     222:	91 e0       	ldi	r25, 0x01	; 1
     224:	50 d2       	rcall	.+1184   	; 0x6c6 <Button_getState>
     226:	82 30       	cpi	r24, 0x02	; 2
     228:	51 f4       	brne	.+20     	; 0x23e <Listener_timeClockEvent+0x2a>
		{
			timeClockState = SEC_MIL;
			Model_setTimeClockDispStateData(timeClockState);
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	2b c0       	rjmp	.+86     	; 0x284 <Model_setTimeClockDispStateData>
     22e:	08 95       	ret
		}
		break;
		
		case SEC_MIL:
		if (Button_getState(&btnDispMode)==ACT_RELEASED)
     230:	8a e4       	ldi	r24, 0x4A	; 74
     232:	91 e0       	ldi	r25, 0x01	; 1
     234:	48 d2       	rcall	.+1168   	; 0x6c6 <Button_getState>
     236:	82 30       	cpi	r24, 0x02	; 2
     238:	11 f4       	brne	.+4      	; 0x23e <Listener_timeClockEvent+0x2a>
		{
			timeClockState = HOUR_MIN;
			Model_setTimeClockDispStateData(timeClockState);
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	23 c0       	rjmp	.+70     	; 0x284 <Model_setTimeClockDispStateData>
     23e:	08 95       	ret

00000240 <Listener_checkEvent>:
     240:	24 d0       	rcall	.+72     	; 0x28a <Model_getTimeModeStateData>
}

void Listener_checkEvent()
{
	uint8_t timeModeState = Model_getTimeModeStateData();
	switch(timeModeState)
     242:	88 23       	and	r24, r24
     244:	19 f0       	breq	.+6      	; 0x24c <Listener_checkEvent+0xc>
     246:	81 30       	cpi	r24, 0x01	; 1
     248:	51 f0       	breq	.+20     	; 0x25e <Listener_checkEvent+0x1e>
	{
		case TIMECLOCK:
		Listener_timeClockEvent();
     24a:	11 c0       	rjmp	.+34     	; 0x26e <Listener_checkEvent+0x2e>
     24c:	e3 df       	rcall	.-58     	; 0x214 <Listener_timeClockEvent>
		if (Button_getState(&btnMode) == ACT_RELEASED)
     24e:	8c e5       	ldi	r24, 0x5C	; 92
     250:	91 e0       	ldi	r25, 0x01	; 1
     252:	39 d2       	rcall	.+1138   	; 0x6c6 <Button_getState>
     254:	82 30       	cpi	r24, 0x02	; 2
		{
			timeModeState = STOPWATCH;
			Model_setTimeModeStateData(timeModeState);
     256:	59 f4       	brne	.+22     	; 0x26e <Listener_checkEvent+0x2e>
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	1a d0       	rcall	.+52     	; 0x290 <Model_setTimeModeStateData>
		}
		break;
		case STOPWATCH:
		Listener_stopWatchEvent();
     25c:	08 c0       	rjmp	.+16     	; 0x26e <Listener_checkEvent+0x2e>
     25e:	b9 df       	rcall	.-142    	; 0x1d2 <Listener_stopWatchEvent>
		if (Button_getState(&btnMode) == ACT_RELEASED)
     260:	8c e5       	ldi	r24, 0x5C	; 92
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	30 d2       	rcall	.+1120   	; 0x6c6 <Button_getState>
     266:	82 30       	cpi	r24, 0x02	; 2
		{
			timeModeState = TIMECLOCK;
			Model_setTimeModeStateData(timeModeState);
     268:	11 f4       	brne	.+4      	; 0x26e <Listener_checkEvent+0x2e>
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	11 d0       	rcall	.+34     	; 0x290 <Model_setTimeModeStateData>
		}
		break;
	}
	Listener_stopWatchEvent();
     26e:	b1 cf       	rjmp	.-158    	; 0x1d2 <Listener_stopWatchEvent>
     270:	08 95       	ret

00000272 <Model_getStopWatchStateData>:
uint8_t stopWatchStateData;

uint8_t Model_getStopWatchStateData()
{
	return stopWatchStateData;
}
     272:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <stopWatchStateData>
     276:	08 95       	ret

00000278 <Model_setStopWatchStateData>:

void Model_setStopWatchStateData(uint8_t state)
{
	stopWatchStateData = state;
     278:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <stopWatchStateData>
     27c:	08 95       	ret

0000027e <Model_getTimeClockDispStateData>:
uint8_t timeClockDispState;

uint8_t Model_getTimeClockDispStateData()
{
	return timeClockDispState;
}
     27e:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <timeClockDispState>
     282:	08 95       	ret

00000284 <Model_setTimeClockDispStateData>:

void Model_setTimeClockDispStateData(uint8_t state)
{
	timeClockDispState = state;
     284:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <timeClockDispState>
     288:	08 95       	ret

0000028a <Model_getTimeModeStateData>:
uint8_t timeModeStateData;

uint8_t Model_getTimeModeStateData()
{
	return timeModeStateData;
}
     28a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <timeModeStateData>
     28e:	08 95       	ret

00000290 <Model_setTimeModeStateData>:

void Model_setTimeModeStateData(uint8_t state)
{
	timeModeStateData = state;
     290:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timeModeStateData>
     294:	08 95       	ret

00000296 <Presenter_init>:
﻿#include "Presenter.h"

void Presenter_init()
{
	LCD_init();
     296:	b3 d3       	rcall	.+1894   	; 0x9fe <LCD_init>
	FND_init();
     298:	40 c2       	rjmp	.+1152   	; 0x71a <FND_init>
     29a:	08 95       	ret

0000029c <Presenter_dispStopWatchData>:
     29c:	bf 92       	push	r11
}

void Presenter_dispStopWatchData(uint8_t hour, uint8_t min, uint8_t sec, uint16_t milisec)
{
     29e:	cf 92       	push	r12
     2a0:	df 92       	push	r13
     2a2:	ef 92       	push	r14
     2a4:	ff 92       	push	r15
     2a6:	0f 93       	push	r16
     2a8:	1f 93       	push	r17
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	6e 97       	sbiw	r28, 0x1e	; 30
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	f8 94       	cli
     2b8:	de bf       	out	0x3e, r29	; 62
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	cd bf       	out	0x3d, r28	; 61
     2be:	b8 2e       	mov	r11, r24
     2c0:	06 2f       	mov	r16, r22
     2c2:	14 2f       	mov	r17, r20
     2c4:	79 01       	movw	r14, r18
	uint16_t stopWatchData;
	char buff[30];
	static uint8_t prevSec = 0xff;
	
	if(sec != prevSec)
     2c6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <prevSec.1993>
     2ca:	84 17       	cp	r24, r20
     2cc:	a1 f1       	breq	.+104    	; 0x336 <Presenter_dispStopWatchData+0x9a>
	{
		prevSec = sec;
     2ce:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <prevSec.1993>
		sprintf(buff, "StopWatch");
     2d2:	8a e0       	ldi	r24, 0x0A	; 10
     2d4:	ed e0       	ldi	r30, 0x0D	; 13
     2d6:	f1 e0       	ldi	r31, 0x01	; 1
     2d8:	9e 01       	movw	r18, r28
     2da:	2f 5f       	subi	r18, 0xFF	; 255
     2dc:	3f 4f       	sbci	r19, 0xFF	; 255
     2de:	69 01       	movw	r12, r18
     2e0:	d9 01       	movw	r26, r18
     2e2:	01 90       	ld	r0, Z+
     2e4:	0d 92       	st	X+, r0
     2e6:	8a 95       	dec	r24
     2e8:	e1 f7       	brne	.-8      	; 0x2e2 <Presenter_dispStopWatchData+0x46>
		LCD_writeStringXY(0, 2, buff);
     2ea:	a9 01       	movw	r20, r18
     2ec:	62 e0       	ldi	r22, 0x02	; 2
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	d3 d3       	rcall	.+1958   	; 0xa98 <LCD_writeStringXY>
		sprintf(buff, "%02d : %02d : %02d : %02d", hour, min, sec, milisec/10);
     2f2:	97 01       	movw	r18, r14
     2f4:	ad ec       	ldi	r26, 0xCD	; 205
     2f6:	bc ec       	ldi	r27, 0xCC	; 204
     2f8:	27 d4       	rcall	.+2126   	; 0xb48 <__umulhisi3>
     2fa:	96 95       	lsr	r25
     2fc:	87 95       	ror	r24
     2fe:	96 95       	lsr	r25
     300:	87 95       	ror	r24
     302:	96 95       	lsr	r25
     304:	87 95       	ror	r24
     306:	9f 93       	push	r25
     308:	8f 93       	push	r24
     30a:	1f 92       	push	r1
     30c:	1f 93       	push	r17
     30e:	1f 92       	push	r1
     310:	0f 93       	push	r16
     312:	1f 92       	push	r1
     314:	bf 92       	push	r11
     316:	87 e1       	ldi	r24, 0x17	; 23
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	9f 93       	push	r25
     31c:	8f 93       	push	r24
     31e:	df 92       	push	r13
     320:	cf 92       	push	r12
     322:	35 d4       	rcall	.+2154   	; 0xb8e <sprintf>
		LCD_writeStringXY(1, 0, buff);
     324:	a6 01       	movw	r20, r12
     326:	60 e0       	ldi	r22, 0x00	; 0
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	b6 d3       	rcall	.+1900   	; 0xa98 <LCD_writeStringXY>
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	de bf       	out	0x3e, r29	; 62
     332:	0f be       	out	0x3f, r0	; 63
     334:	cd bf       	out	0x3d, r28	; 61
	}
	
	stopWatchData = (min%10 * 1000) + (sec * 10) + (milisec / 100 % 10);
     336:	8d ec       	ldi	r24, 0xCD	; 205
     338:	08 9f       	mul	r16, r24
     33a:	81 2d       	mov	r24, r1
     33c:	11 24       	eor	r1, r1
     33e:	86 95       	lsr	r24
     340:	86 95       	lsr	r24
     342:	86 95       	lsr	r24
     344:	88 0f       	add	r24, r24
     346:	98 2f       	mov	r25, r24
     348:	99 0f       	add	r25, r25
     34a:	99 0f       	add	r25, r25
     34c:	89 0f       	add	r24, r25
     34e:	08 1b       	sub	r16, r24
     350:	88 ee       	ldi	r24, 0xE8	; 232
     352:	93 e0       	ldi	r25, 0x03	; 3
     354:	08 9f       	mul	r16, r24
     356:	90 01       	movw	r18, r0
     358:	09 9f       	mul	r16, r25
     35a:	30 0d       	add	r19, r0
     35c:	11 24       	eor	r1, r1
     35e:	41 2f       	mov	r20, r17
     360:	50 e0       	ldi	r21, 0x00	; 0
     362:	ba 01       	movw	r22, r20
     364:	66 0f       	add	r22, r22
     366:	77 1f       	adc	r23, r23
     368:	ca 01       	movw	r24, r20
     36a:	88 0f       	add	r24, r24
     36c:	99 1f       	adc	r25, r25
     36e:	88 0f       	add	r24, r24
     370:	99 1f       	adc	r25, r25
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	ab 01       	movw	r20, r22
     378:	48 0f       	add	r20, r24
     37a:	59 1f       	adc	r21, r25
     37c:	42 0f       	add	r20, r18
     37e:	53 1f       	adc	r21, r19
     380:	97 01       	movw	r18, r14
     382:	36 95       	lsr	r19
     384:	27 95       	ror	r18
     386:	36 95       	lsr	r19
     388:	27 95       	ror	r18
     38a:	ab e7       	ldi	r26, 0x7B	; 123
     38c:	b4 e1       	ldi	r27, 0x14	; 20
     38e:	dc d3       	rcall	.+1976   	; 0xb48 <__umulhisi3>
     390:	fc 01       	movw	r30, r24
     392:	f6 95       	lsr	r31
     394:	e7 95       	ror	r30
     396:	9f 01       	movw	r18, r30
     398:	ad ec       	ldi	r26, 0xCD	; 205
     39a:	bc ec       	ldi	r27, 0xCC	; 204
     39c:	d5 d3       	rcall	.+1962   	; 0xb48 <__umulhisi3>
     39e:	96 95       	lsr	r25
     3a0:	87 95       	ror	r24
     3a2:	96 95       	lsr	r25
     3a4:	87 95       	ror	r24
     3a6:	96 95       	lsr	r25
     3a8:	87 95       	ror	r24
     3aa:	9c 01       	movw	r18, r24
     3ac:	22 0f       	add	r18, r18
     3ae:	33 1f       	adc	r19, r19
     3b0:	88 0f       	add	r24, r24
     3b2:	99 1f       	adc	r25, r25
     3b4:	88 0f       	add	r24, r24
     3b6:	99 1f       	adc	r25, r25
     3b8:	88 0f       	add	r24, r24
     3ba:	99 1f       	adc	r25, r25
     3bc:	82 0f       	add	r24, r18
     3be:	93 1f       	adc	r25, r19
     3c0:	9f 01       	movw	r18, r30
     3c2:	28 1b       	sub	r18, r24
     3c4:	39 0b       	sbc	r19, r25
	FND_setFndData(stopWatchData);
     3c6:	c9 01       	movw	r24, r18
     3c8:	84 0f       	add	r24, r20
     3ca:	95 1f       	adc	r25, r21
     3cc:	c8 d2       	rcall	.+1424   	; 0x95e <FND_setFndData>
	
	
}
     3ce:	6e 96       	adiw	r28, 0x1e	; 30
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	f8 94       	cli
     3d4:	de bf       	out	0x3e, r29	; 62
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	cd bf       	out	0x3d, r28	; 61
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	1f 91       	pop	r17
     3e0:	0f 91       	pop	r16
     3e2:	ff 90       	pop	r15
     3e4:	ef 90       	pop	r14
     3e6:	df 90       	pop	r13
     3e8:	cf 90       	pop	r12
     3ea:	bf 90       	pop	r11
     3ec:	08 95       	ret

000003ee <Presenter_dispTimeClockData>:

void Presenter_dispTimeClockData(uint8_t hour, uint8_t min, uint8_t sec, uint16_t milisec)
{
     3ee:	bf 92       	push	r11
     3f0:	cf 92       	push	r12
     3f2:	df 92       	push	r13
     3f4:	ef 92       	push	r14
     3f6:	ff 92       	push	r15
     3f8:	0f 93       	push	r16
     3fa:	1f 93       	push	r17
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
     404:	6e 97       	sbiw	r28, 0x1e	; 30
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	f8 94       	cli
     40a:	de bf       	out	0x3e, r29	; 62
     40c:	0f be       	out	0x3f, r0	; 63
     40e:	cd bf       	out	0x3d, r28	; 61
     410:	b8 2e       	mov	r11, r24
     412:	06 2f       	mov	r16, r22
     414:	14 2f       	mov	r17, r20
     416:	79 01       	movw	r14, r18
	uint16_t tiemClockData;
	uint8_t timeClockDispState;
	char buff[30];
	static uint8_t prevSec = 0xff;
	
	if(sec != prevSec)
     418:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     41c:	84 17       	cp	r24, r20
     41e:	a1 f1       	breq	.+104    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
	{
		prevSec = sec;
     420:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__DATA_REGION_ORIGIN__>
		sprintf(buff, "TimeClock");
     424:	8a e0       	ldi	r24, 0x0A	; 10
     426:	e1 e3       	ldi	r30, 0x31	; 49
     428:	f1 e0       	ldi	r31, 0x01	; 1
     42a:	9e 01       	movw	r18, r28
     42c:	2f 5f       	subi	r18, 0xFF	; 255
     42e:	3f 4f       	sbci	r19, 0xFF	; 255
     430:	69 01       	movw	r12, r18
     432:	d9 01       	movw	r26, r18
     434:	01 90       	ld	r0, Z+
     436:	0d 92       	st	X+, r0
     438:	8a 95       	dec	r24
     43a:	e1 f7       	brne	.-8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		LCD_writeStringXY(0, 2, buff);
     43c:	a9 01       	movw	r20, r18
     43e:	62 e0       	ldi	r22, 0x02	; 2
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	2a d3       	rcall	.+1620   	; 0xa98 <LCD_writeStringXY>
		sprintf(buff, "%02d : %02d : %02d : %02d", hour, min, sec, milisec/10);
     444:	97 01       	movw	r18, r14
     446:	ad ec       	ldi	r26, 0xCD	; 205
     448:	bc ec       	ldi	r27, 0xCC	; 204
     44a:	7e d3       	rcall	.+1788   	; 0xb48 <__umulhisi3>
     44c:	96 95       	lsr	r25
     44e:	87 95       	ror	r24
     450:	96 95       	lsr	r25
     452:	87 95       	ror	r24
     454:	96 95       	lsr	r25
     456:	87 95       	ror	r24
     458:	9f 93       	push	r25
     45a:	8f 93       	push	r24
     45c:	1f 92       	push	r1
     45e:	1f 93       	push	r17
     460:	1f 92       	push	r1
     462:	0f 93       	push	r16
     464:	1f 92       	push	r1
     466:	bf 92       	push	r11
     468:	87 e1       	ldi	r24, 0x17	; 23
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	9f 93       	push	r25
     46e:	8f 93       	push	r24
     470:	df 92       	push	r13
     472:	cf 92       	push	r12
     474:	8c d3       	rcall	.+1816   	; 0xb8e <sprintf>
		LCD_writeStringXY(1, 0, buff);
     476:	a6 01       	movw	r20, r12
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	0d d3       	rcall	.+1562   	; 0xa98 <LCD_writeStringXY>
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
	}
	
	timeClockDispState = Model_getTimeClockDispStateData();
     486:	cd bf       	out	0x3d, r28	; 61
     488:	fa de       	rcall	.-524    	; 0x27e <Model_getTimeClockDispStateData>
	
	switch(timeClockDispState)
     48a:	88 23       	and	r24, r24
     48c:	19 f0       	breq	.+6      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     48e:	81 30       	cpi	r24, 0x01	; 1
     490:	51 f0       	breq	.+20     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     492:	19 c0       	rjmp	.+50     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
	{
		case HOUR_MIN:
		tiemClockData = hour*100 + min;
     494:	80 2f       	mov	r24, r16
     496:	90 e0       	ldi	r25, 0x00	; 0
		FND_setFndData(tiemClockData);
     498:	24 e6       	ldi	r18, 0x64	; 100
     49a:	b2 9e       	mul	r11, r18
     49c:	80 0d       	add	r24, r0
     49e:	91 1d       	adc	r25, r1
     4a0:	11 24       	eor	r1, r1
		break;
     4a2:	5d d2       	rcall	.+1210   	; 0x95e <FND_setFndData>
		case SEC_MIL:
		tiemClockData = sec*100 + milisec/10;
     4a4:	10 c0       	rjmp	.+32     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4a6:	97 01       	movw	r18, r14
     4a8:	ad ec       	ldi	r26, 0xCD	; 205
     4aa:	bc ec       	ldi	r27, 0xCC	; 204
     4ac:	4d d3       	rcall	.+1690   	; 0xb48 <__umulhisi3>
     4ae:	96 95       	lsr	r25
     4b0:	87 95       	ror	r24
     4b2:	96 95       	lsr	r25
     4b4:	87 95       	ror	r24
     4b6:	96 95       	lsr	r25
		FND_setFndData(tiemClockData);
     4b8:	87 95       	ror	r24
     4ba:	34 e6       	ldi	r19, 0x64	; 100
     4bc:	13 9f       	mul	r17, r19
     4be:	80 0d       	add	r24, r0
     4c0:	91 1d       	adc	r25, r1
     4c2:	11 24       	eor	r1, r1
		break;
	}
	if ((milisec/10)<50)
     4c4:	4c d2       	rcall	.+1176   	; 0x95e <FND_setFndData>
     4c6:	84 ef       	ldi	r24, 0xF4	; 244
     4c8:	e8 16       	cp	r14, r24
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	f8 06       	cpc	r15, r24
	{
		FND_colonOn();
     4ce:	10 f4       	brcc	.+4      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4d0:	2d d1       	rcall	.+602    	; 0x72c <FND_colonOn>
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
	}
	else
	{
		FND_colonOff();
     4d4:	2f d1       	rcall	.+606    	; 0x734 <FND_colonOff>
     4d6:	6e 96       	adiw	r28, 0x1e	; 30
	}
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	f8 94       	cli
     4dc:	de bf       	out	0x3e, r29	; 62
     4de:	0f be       	out	0x3f, r0	; 63
     4e0:	cd bf       	out	0x3d, r28	; 61
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	ff 90       	pop	r15
     4ec:	ef 90       	pop	r14
     4ee:	df 90       	pop	r13
     4f0:	cf 90       	pop	r12
     4f2:	bf 90       	pop	r11
     4f4:	08 95       	ret

000004f6 <StopWatch_init>:
static uint8_t min;
static uint8_t hour;

void StopWatch_init()
{
	milisec = 0;
     4f6:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <milisec+0x1>
     4fa:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <milisec>
	sec = 0;
     4fe:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <sec>
	min = 0;
     502:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <min>
	hour = 0;
     506:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
     50a:	08 95       	ret

0000050c <StopWatch_incMilisec>:
}

void StopWatch_incMilisec()
{
	uint8_t stopWatchState;
	stopWatchState = Model_getStopWatchStateData();
     50c:	b2 de       	rcall	.-668    	; 0x272 <Model_getStopWatchStateData>
	
	if (stopWatchState == RUN)
     50e:	81 30       	cpi	r24, 0x01	; 1
     510:	09 f0       	breq	.+2      	; 0x514 <StopWatch_incMilisec+0x8>
     512:	47 c0       	rjmp	.+142    	; 0x5a2 <StopWatch_incMilisec+0x96>
	{
		milisec = (milisec + 1) % 1000;
     514:	40 91 3f 01 	lds	r20, 0x013F	; 0x80013f <milisec>
     518:	50 91 40 01 	lds	r21, 0x0140	; 0x800140 <milisec+0x1>
     51c:	4f 5f       	subi	r20, 0xFF	; 255
     51e:	5f 4f       	sbci	r21, 0xFF	; 255
     520:	9a 01       	movw	r18, r20
     522:	36 95       	lsr	r19
     524:	27 95       	ror	r18
     526:	36 95       	lsr	r19
     528:	27 95       	ror	r18
     52a:	36 95       	lsr	r19
     52c:	27 95       	ror	r18
     52e:	a5 ec       	ldi	r26, 0xC5	; 197
     530:	b0 e2       	ldi	r27, 0x20	; 32
     532:	0a d3       	rcall	.+1556   	; 0xb48 <__umulhisi3>
     534:	92 95       	swap	r25
     536:	82 95       	swap	r24
     538:	8f 70       	andi	r24, 0x0F	; 15
     53a:	89 27       	eor	r24, r25
     53c:	9f 70       	andi	r25, 0x0F	; 15
     53e:	89 27       	eor	r24, r25
     540:	68 ee       	ldi	r22, 0xE8	; 232
     542:	73 e0       	ldi	r23, 0x03	; 3
     544:	86 9f       	mul	r24, r22
     546:	90 01       	movw	r18, r0
     548:	87 9f       	mul	r24, r23
     54a:	30 0d       	add	r19, r0
     54c:	96 9f       	mul	r25, r22
     54e:	30 0d       	add	r19, r0
     550:	11 24       	eor	r1, r1
     552:	ca 01       	movw	r24, r20
     554:	82 1b       	sub	r24, r18
     556:	93 0b       	sbc	r25, r19
     558:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <milisec+0x1>
     55c:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <milisec>
	}
	else return;
	
	if (milisec) return;
     560:	89 2b       	or	r24, r25
     562:	f9 f4       	brne	.+62     	; 0x5a2 <StopWatch_incMilisec+0x96>
	
	sec = (sec + 1) % 60;
     564:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <sec>
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	01 96       	adiw	r24, 0x01	; 1
     56c:	6c e3       	ldi	r22, 0x3C	; 60
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	d8 d2       	rcall	.+1456   	; 0xb22 <__divmodhi4>
     572:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <sec>
	if (sec) return;
     576:	81 11       	cpse	r24, r1
     578:	14 c0       	rjmp	.+40     	; 0x5a2 <StopWatch_incMilisec+0x96>
	
	min = (min + 1) % 60;
     57a:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <min>
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	01 96       	adiw	r24, 0x01	; 1
     582:	6c e3       	ldi	r22, 0x3C	; 60
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	cd d2       	rcall	.+1434   	; 0xb22 <__divmodhi4>
     588:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <min>
	if (min) return;
     58c:	81 11       	cpse	r24, r1
     58e:	09 c0       	rjmp	.+18     	; 0x5a2 <StopWatch_incMilisec+0x96>
	
	hour = (hour + 1) % 24;
     590:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	01 96       	adiw	r24, 0x01	; 1
     598:	68 e1       	ldi	r22, 0x18	; 24
     59a:	70 e0       	ldi	r23, 0x00	; 0
     59c:	c2 d2       	rcall	.+1412   	; 0xb22 <__divmodhi4>
     59e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
     5a2:	08 95       	ret

000005a4 <StopWatch_run>:
}

void StopWatch_run()
{
     5a4:	cf 93       	push	r28
	uint8_t stopWatchState;
	stopWatchState = Model_getStopWatchStateData();
     5a6:	65 de       	rcall	.-822    	; 0x272 <Model_getStopWatchStateData>
     5a8:	c8 2f       	mov	r28, r24
	
	uint8_t TimeModeState;
	TimeModeState = Model_getTimeModeStateData();
     5aa:	6f de       	rcall	.-802    	; 0x28a <Model_getTimeModeStateData>
     5ac:	81 30       	cpi	r24, 0x01	; 1
	
	if (TimeModeState != STOPWATCH) return;
     5ae:	b9 f4       	brne	.+46     	; 0x5de <StopWatch_run+0x3a>
     5b0:	c2 30       	cpi	r28, 0x02	; 2
	
	if (stopWatchState == RESET)
     5b2:	51 f4       	brne	.+20     	; 0x5c8 <StopWatch_run+0x24>
     5b4:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <milisec+0x1>
	{
		milisec = 0;
     5b8:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <milisec>
     5bc:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <sec>
		sec = 0;
     5c0:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <min>
		min = 0;
     5c4:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
		hour = 0;
     5c8:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <milisec>
	}
	
	Presenter_dispStopWatchData(hour, min, sec, milisec);
     5cc:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <milisec+0x1>
     5d0:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <sec>
     5d4:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <min>
     5d8:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
     5dc:	5f de       	rcall	.-834    	; 0x29c <Presenter_dispStopWatchData>
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <TimeClock_init>:
static uint8_t min;
static uint8_t hour;

void TimeClock_init()
{
	milisec = 0;
     5e2:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <milisec+0x1>
     5e6:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <milisec>
	sec = 10;
     5ea:	8a e0       	ldi	r24, 0x0A	; 10
     5ec:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <sec>
	min = 39;
     5f0:	87 e2       	ldi	r24, 0x27	; 39
     5f2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <min>
	hour =3;
     5f6:	83 e0       	ldi	r24, 0x03	; 3
     5f8:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <hour>
     5fc:	08 95       	ret

000005fe <TimeClock_incMilisec>:
}

void TimeClock_incMilisec()
{
	milisec = (milisec + 1) % 1000; // 1ms마다 milisec증가 범위: 0 ~ 999
     5fe:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <milisec>
     602:	50 91 45 01 	lds	r21, 0x0145	; 0x800145 <milisec+0x1>
     606:	4f 5f       	subi	r20, 0xFF	; 255
     608:	5f 4f       	sbci	r21, 0xFF	; 255
     60a:	9a 01       	movw	r18, r20
     60c:	36 95       	lsr	r19
     60e:	27 95       	ror	r18
     610:	36 95       	lsr	r19
     612:	27 95       	ror	r18
     614:	36 95       	lsr	r19
     616:	27 95       	ror	r18
     618:	a5 ec       	ldi	r26, 0xC5	; 197
     61a:	b0 e2       	ldi	r27, 0x20	; 32
     61c:	95 d2       	rcall	.+1322   	; 0xb48 <__umulhisi3>
     61e:	92 95       	swap	r25
     620:	82 95       	swap	r24
     622:	8f 70       	andi	r24, 0x0F	; 15
     624:	89 27       	eor	r24, r25
     626:	9f 70       	andi	r25, 0x0F	; 15
     628:	89 27       	eor	r24, r25
     62a:	68 ee       	ldi	r22, 0xE8	; 232
     62c:	73 e0       	ldi	r23, 0x03	; 3
     62e:	86 9f       	mul	r24, r22
     630:	90 01       	movw	r18, r0
     632:	87 9f       	mul	r24, r23
     634:	30 0d       	add	r19, r0
     636:	96 9f       	mul	r25, r22
     638:	30 0d       	add	r19, r0
     63a:	11 24       	eor	r1, r1
     63c:	ca 01       	movw	r24, r20
     63e:	82 1b       	sub	r24, r18
     640:	93 0b       	sbc	r25, r19
     642:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <milisec+0x1>
     646:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <milisec>
	
	if (milisec) return; // milisec이 0이면 999까지 돌고 1000이 된것이므로 (거짓)
     64a:	89 2b       	or	r24, r25
     64c:	f9 f4       	brne	.+62     	; 0x68c <TimeClock_incMilisec+0x8e>
	
	sec = (sec + 1) % 60;
     64e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <sec>
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	01 96       	adiw	r24, 0x01	; 1
     656:	6c e3       	ldi	r22, 0x3C	; 60
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	63 d2       	rcall	.+1222   	; 0xb22 <__divmodhi4>
     65c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <sec>
	if (sec) return;
     660:	81 11       	cpse	r24, r1
     662:	14 c0       	rjmp	.+40     	; 0x68c <TimeClock_incMilisec+0x8e>
	
	min = (min + 1) % 60;
     664:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <min>
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	01 96       	adiw	r24, 0x01	; 1
     66c:	6c e3       	ldi	r22, 0x3C	; 60
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	58 d2       	rcall	.+1200   	; 0xb22 <__divmodhi4>
     672:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <min>
	if (min) return;
     676:	81 11       	cpse	r24, r1
     678:	09 c0       	rjmp	.+18     	; 0x68c <TimeClock_incMilisec+0x8e>
	
	hour = (hour + 1) % 24;
     67a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <hour>
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	68 e1       	ldi	r22, 0x18	; 24
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	4d d2       	rcall	.+1178   	; 0xb22 <__divmodhi4>
     688:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <hour>
     68c:	08 95       	ret

0000068e <TimeClock_run>:
}

uint16_t TimeClock_run()
{
	uint8_t TimeModeState;
	TimeModeState = Model_getTimeModeStateData();
     68e:	fd dd       	rcall	.-1030   	; 0x28a <Model_getTimeModeStateData>
	
	if (TimeModeState != TIMECLOCK) return;
     690:	81 11       	cpse	r24, r1
     692:	0b c0       	rjmp	.+22     	; 0x6aa <TimeClock_run+0x1c>
	
	Presenter_dispTimeClockData(hour, min, sec, milisec);
     694:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <milisec>
     698:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <milisec+0x1>
     69c:	40 91 43 01 	lds	r20, 0x0143	; 0x800143 <sec>
     6a0:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <min>
     6a4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <hour>
     6a8:	a2 ce       	rjmp	.-700    	; 0x3ee <Presenter_dispTimeClockData>
     6aa:	08 95       	ret

000006ac <Button_init>:
﻿#include "Button.h"

void Button_init(button_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{	
     6ac:	fc 01       	movw	r30, r24
     6ae:	cb 01       	movw	r24, r22
	// 구조체에 버튼에서 사용하는 변수들 초기화
	btn->DDR = ddr;
     6b0:	71 83       	std	Z+1, r23	; 0x01
     6b2:	60 83       	st	Z, r22
	btn->PIN = pin;
     6b4:	53 83       	std	Z+3, r21	; 0x03
     6b6:	42 83       	std	Z+2, r20	; 0x02
	btn->pinNum = pinNum;
     6b8:	24 83       	std	Z+4, r18	; 0x04
	btn->prevState = RELEASED;
     6ba:	31 e0       	ldi	r19, 0x01	; 1
     6bc:	35 83       	std	Z+5, r19	; 0x05
	GPIO_initPin(btn->DDR, btn->pinNum, INPUT);
     6be:	40 e0       	ldi	r20, 0x00	; 0
     6c0:	62 2f       	mov	r22, r18
     6c2:	f6 c1       	rjmp	.+1004   	; 0xab0 <GPIO_initPin>
     6c4:	08 95       	ret

000006c6 <Button_getState>:
}

uint8_t Button_getState(button_t *btn)
{
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	ec 01       	movw	r28, r24
	uint8_t curState = GPIO_readPin(btn->PIN, btn->pinNum); // PULL-UP이므로 버튼이 안눌리면 1 눌리면 0
     6cc:	6c 81       	ldd	r22, Y+4	; 0x04
     6ce:	8a 81       	ldd	r24, Y+2	; 0x02
     6d0:	9b 81       	ldd	r25, Y+3	; 0x03
     6d2:	08 d2       	rcall	.+1040   	; 0xae4 <GPIO_readPin>
     6d4:	98 2f       	mov	r25, r24
	
	if ((curState == PUSHED) && (btn->prevState == RELEASED))
     6d6:	81 11       	cpse	r24, r1
     6d8:	0b c0       	rjmp	.+22     	; 0x6f0 <Button_getState+0x2a>
     6da:	8d 81       	ldd	r24, Y+5	; 0x05
     6dc:	81 30       	cpi	r24, 0x01	; 1
     6de:	41 f4       	brne	.+16     	; 0x6f0 <Button_getState+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6e0:	ef e3       	ldi	r30, 0x3F	; 63
     6e2:	fc e9       	ldi	r31, 0x9C	; 156
     6e4:	31 97       	sbiw	r30, 0x01	; 1
     6e6:	f1 f7       	brne	.-4      	; 0x6e4 <Button_getState+0x1e>
     6e8:	00 c0       	rjmp	.+0      	; 0x6ea <Button_getState+0x24>
     6ea:	00 00       	nop
	{
		_delay_ms(10); // bouncing 방지
		btn->prevState = PUSHED;
     6ec:	1d 82       	std	Y+5, r1	; 0x05
		return ACT_PUSHED; // 리턴값이 1이면 눌렀을때 동작 0이면 뗐을때 동작
     6ee:	12 c0       	rjmp	.+36     	; 0x714 <Button_getState+0x4e>
	}
	else if ((curState != PUSHED) && (btn->prevState == PUSHED))
     6f0:	99 23       	and	r25, r25
     6f2:	69 f0       	breq	.+26     	; 0x70e <Button_getState+0x48>
     6f4:	8d 81       	ldd	r24, Y+5	; 0x05
     6f6:	81 11       	cpse	r24, r1
     6f8:	0c c0       	rjmp	.+24     	; 0x712 <Button_getState+0x4c>
     6fa:	8f e3       	ldi	r24, 0x3F	; 63
     6fc:	9c e9       	ldi	r25, 0x9C	; 156
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	f1 f7       	brne	.-4      	; 0x6fe <Button_getState+0x38>
     702:	00 c0       	rjmp	.+0      	; 0x704 <Button_getState+0x3e>
     704:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevState = RELEASED;
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	8d 83       	std	Y+5, r24	; 0x05
		return ACT_RELEASED; // 리턴값이 0이면 눌렀을때 동작 1이면 뗐을때 동작
     70a:	82 e0       	ldi	r24, 0x02	; 2
     70c:	03 c0       	rjmp	.+6      	; 0x714 <Button_getState+0x4e>
	}
	return ACT_NONE;
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	01 c0       	rjmp	.+2      	; 0x714 <Button_getState+0x4e>
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	08 95       	ret

0000071a <FND_init>:
uint8_t fndColonFlag = 0;

void FND_init()
{
	//FNC 출력모드
	FND_DIGIT_DDR |= ((1<<FND_DIGIT_4)|(1<<FND_DIGIT_3)|(1<<FND_DIGIT_2)|(1<<FND_DIGIT_1));
     71a:	e4 e6       	ldi	r30, 0x64	; 100
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	80 81       	ld	r24, Z
     720:	8f 60       	ori	r24, 0x0F	; 15
     722:	80 83       	st	Z, r24
	FND_DATA_DDR =0xff;
     724:	8f ef       	ldi	r24, 0xFF	; 255
     726:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     72a:	08 95       	ret

0000072c <FND_colonOn>:
}
void FND_colonOn()
{
	fndColonFlag = 1;
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <fndColonFlag>
     732:	08 95       	ret

00000734 <FND_colonOff>:
}
void FND_colonOff()
{
	fndColonFlag = 0;
     734:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <fndColonFlag>
     738:	08 95       	ret

0000073a <FND_dispNum>:
}

void FND_dispNum(uint16_t fndNum)
{
     73a:	0f 93       	push	r16
     73c:	1f 93       	push	r17
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	cd b7       	in	r28, 0x3d	; 61
     744:	de b7       	in	r29, 0x3e	; 62
     746:	2b 97       	sbiw	r28, 0x0b	; 11
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	de bf       	out	0x3e, r29	; 62
     74e:	0f be       	out	0x3f, r0	; 63
     750:	cd bf       	out	0x3d, r28	; 61
     752:	8c 01       	movw	r16, r24
	uint8_t fndFont[11] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x67, 0x80};
     754:	8b e0       	ldi	r24, 0x0B	; 11
     756:	e2 e0       	ldi	r30, 0x02	; 2
     758:	f1 e0       	ldi	r31, 0x01	; 1
     75a:	de 01       	movw	r26, r28
     75c:	11 96       	adiw	r26, 0x01	; 1
     75e:	01 90       	ld	r0, Z+
     760:	0d 92       	st	X+, r0
     762:	8a 95       	dec	r24
     764:	e1 f7       	brne	.-8      	; 0x75e <FND_dispNum+0x24>
	                       // 0      1     2     3     4    5     6     7     8     9   DP
	static uint8_t fndDigitState = 0;
	fndDigitState = (fndDigitState + 1) % 5;
     766:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <fndDigitState.1748>
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	01 96       	adiw	r24, 0x01	; 1
     76e:	65 e0       	ldi	r22, 0x05	; 5
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	d7 d1       	rcall	.+942    	; 0xb22 <__divmodhi4>
     774:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <fndDigitState.1748>
	
	FND_DIGIT_PORT |= ((1<<FND_DIGIT_4)|(1<<FND_DIGIT_3)|(1<<FND_DIGIT_2)|(1<<FND_DIGIT_1)); // FND 전부 OFF
     778:	e5 e6       	ldi	r30, 0x65	; 101
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	80 81       	ld	r24, Z
     77e:	8f 60       	ori	r24, 0x0F	; 15
     780:	80 83       	st	Z, r24
	
	switch(fndDigitState)
     782:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <fndDigitState.1748>
     786:	82 30       	cpi	r24, 0x02	; 2
     788:	09 f4       	brne	.+2      	; 0x78c <FND_dispNum+0x52>
     78a:	78 c0       	rjmp	.+240    	; 0x87c <FND_dispNum+0x142>
     78c:	30 f4       	brcc	.+12     	; 0x79a <FND_dispNum+0x60>
     78e:	88 23       	and	r24, r24
     790:	59 f0       	breq	.+22     	; 0x7a8 <FND_dispNum+0x6e>
     792:	81 30       	cpi	r24, 0x01	; 1
     794:	09 f4       	brne	.+2      	; 0x798 <FND_dispNum+0x5e>
     796:	40 c0       	rjmp	.+128    	; 0x818 <FND_dispNum+0xde>
     798:	d7 c0       	rjmp	.+430    	; 0x948 <FND_dispNum+0x20e>
     79a:	83 30       	cpi	r24, 0x03	; 3
     79c:	09 f4       	brne	.+2      	; 0x7a0 <FND_dispNum+0x66>
     79e:	9e c0       	rjmp	.+316    	; 0x8dc <FND_dispNum+0x1a2>
     7a0:	84 30       	cpi	r24, 0x04	; 4
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <FND_dispNum+0x6c>
     7a4:	c2 c0       	rjmp	.+388    	; 0x92a <FND_dispNum+0x1f0>
     7a6:	d0 c0       	rjmp	.+416    	; 0x948 <FND_dispNum+0x20e>
	{
		case 0:
		FND_DATA_PORT = fndFont[fndNum/1000%10]; // %10을 하는 이유는 uint16값이 천의자리 이상일 수도 있기 때문
     7a8:	98 01       	movw	r18, r16
     7aa:	36 95       	lsr	r19
     7ac:	27 95       	ror	r18
     7ae:	36 95       	lsr	r19
     7b0:	27 95       	ror	r18
     7b2:	36 95       	lsr	r19
     7b4:	27 95       	ror	r18
     7b6:	a5 ec       	ldi	r26, 0xC5	; 197
     7b8:	b0 e2       	ldi	r27, 0x20	; 32
     7ba:	c6 d1       	rcall	.+908    	; 0xb48 <__umulhisi3>
     7bc:	ac 01       	movw	r20, r24
     7be:	52 95       	swap	r21
     7c0:	42 95       	swap	r20
     7c2:	4f 70       	andi	r20, 0x0F	; 15
     7c4:	45 27       	eor	r20, r21
     7c6:	5f 70       	andi	r21, 0x0F	; 15
     7c8:	45 27       	eor	r20, r21
     7ca:	9a 01       	movw	r18, r20
     7cc:	ad ec       	ldi	r26, 0xCD	; 205
     7ce:	bc ec       	ldi	r27, 0xCC	; 204
     7d0:	bb d1       	rcall	.+886    	; 0xb48 <__umulhisi3>
     7d2:	96 95       	lsr	r25
     7d4:	87 95       	ror	r24
     7d6:	96 95       	lsr	r25
     7d8:	87 95       	ror	r24
     7da:	96 95       	lsr	r25
     7dc:	87 95       	ror	r24
     7de:	9c 01       	movw	r18, r24
     7e0:	22 0f       	add	r18, r18
     7e2:	33 1f       	adc	r19, r19
     7e4:	88 0f       	add	r24, r24
     7e6:	99 1f       	adc	r25, r25
     7e8:	88 0f       	add	r24, r24
     7ea:	99 1f       	adc	r25, r25
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	82 0f       	add	r24, r18
     7f2:	93 1f       	adc	r25, r19
     7f4:	9a 01       	movw	r18, r20
     7f6:	28 1b       	sub	r18, r24
     7f8:	39 0b       	sbc	r19, r25
     7fa:	e1 e0       	ldi	r30, 0x01	; 1
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	ec 0f       	add	r30, r28
     800:	fd 1f       	adc	r31, r29
     802:	e2 0f       	add	r30, r18
     804:	f3 1f       	adc	r31, r19
     806:	80 81       	ld	r24, Z
     808:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<FND_DIGIT_1); // 천의자리
     80c:	e5 e6       	ldi	r30, 0x65	; 101
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	8e 7f       	andi	r24, 0xFE	; 254
     814:	80 83       	st	Z, r24
		break;
     816:	98 c0       	rjmp	.+304    	; 0x948 <FND_dispNum+0x20e>
		case 1:
		FND_DATA_PORT = fndFont[fndNum/100%10];
     818:	98 01       	movw	r18, r16
     81a:	36 95       	lsr	r19
     81c:	27 95       	ror	r18
     81e:	36 95       	lsr	r19
     820:	27 95       	ror	r18
     822:	ab e7       	ldi	r26, 0x7B	; 123
     824:	b4 e1       	ldi	r27, 0x14	; 20
     826:	90 d1       	rcall	.+800    	; 0xb48 <__umulhisi3>
     828:	ac 01       	movw	r20, r24
     82a:	56 95       	lsr	r21
     82c:	47 95       	ror	r20
     82e:	9a 01       	movw	r18, r20
     830:	ad ec       	ldi	r26, 0xCD	; 205
     832:	bc ec       	ldi	r27, 0xCC	; 204
     834:	89 d1       	rcall	.+786    	; 0xb48 <__umulhisi3>
     836:	96 95       	lsr	r25
     838:	87 95       	ror	r24
     83a:	96 95       	lsr	r25
     83c:	87 95       	ror	r24
     83e:	96 95       	lsr	r25
     840:	87 95       	ror	r24
     842:	9c 01       	movw	r18, r24
     844:	22 0f       	add	r18, r18
     846:	33 1f       	adc	r19, r19
     848:	88 0f       	add	r24, r24
     84a:	99 1f       	adc	r25, r25
     84c:	88 0f       	add	r24, r24
     84e:	99 1f       	adc	r25, r25
     850:	88 0f       	add	r24, r24
     852:	99 1f       	adc	r25, r25
     854:	82 0f       	add	r24, r18
     856:	93 1f       	adc	r25, r19
     858:	9a 01       	movw	r18, r20
     85a:	28 1b       	sub	r18, r24
     85c:	39 0b       	sbc	r19, r25
     85e:	e1 e0       	ldi	r30, 0x01	; 1
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	ec 0f       	add	r30, r28
     864:	fd 1f       	adc	r31, r29
     866:	e2 0f       	add	r30, r18
     868:	f3 1f       	adc	r31, r19
     86a:	80 81       	ld	r24, Z
     86c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<FND_DIGIT_2); // 백의자리
     870:	e5 e6       	ldi	r30, 0x65	; 101
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	80 81       	ld	r24, Z
     876:	8d 7f       	andi	r24, 0xFD	; 253
		break;
     878:	80 83       	st	Z, r24
		case 2:
		FND_DATA_PORT = fndFont[fndNum/10%10];
     87a:	66 c0       	rjmp	.+204    	; 0x948 <FND_dispNum+0x20e>
     87c:	98 01       	movw	r18, r16
     87e:	ad ec       	ldi	r26, 0xCD	; 205
     880:	bc ec       	ldi	r27, 0xCC	; 204
     882:	62 d1       	rcall	.+708    	; 0xb48 <__umulhisi3>
     884:	ac 01       	movw	r20, r24
     886:	56 95       	lsr	r21
     888:	47 95       	ror	r20
     88a:	56 95       	lsr	r21
     88c:	47 95       	ror	r20
     88e:	56 95       	lsr	r21
     890:	47 95       	ror	r20
     892:	9a 01       	movw	r18, r20
     894:	59 d1       	rcall	.+690    	; 0xb48 <__umulhisi3>
     896:	96 95       	lsr	r25
     898:	87 95       	ror	r24
     89a:	96 95       	lsr	r25
     89c:	87 95       	ror	r24
     89e:	96 95       	lsr	r25
     8a0:	87 95       	ror	r24
     8a2:	9c 01       	movw	r18, r24
     8a4:	22 0f       	add	r18, r18
     8a6:	33 1f       	adc	r19, r19
     8a8:	88 0f       	add	r24, r24
     8aa:	99 1f       	adc	r25, r25
     8ac:	88 0f       	add	r24, r24
     8ae:	99 1f       	adc	r25, r25
     8b0:	88 0f       	add	r24, r24
     8b2:	99 1f       	adc	r25, r25
     8b4:	82 0f       	add	r24, r18
     8b6:	93 1f       	adc	r25, r19
     8b8:	9a 01       	movw	r18, r20
     8ba:	28 1b       	sub	r18, r24
     8bc:	39 0b       	sbc	r19, r25
     8be:	e1 e0       	ldi	r30, 0x01	; 1
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	ec 0f       	add	r30, r28
     8c4:	fd 1f       	adc	r31, r29
     8c6:	e2 0f       	add	r30, r18
     8c8:	f3 1f       	adc	r31, r19
     8ca:	80 81       	ld	r24, Z
     8cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<FND_DIGIT_3); // 십의자리
     8d0:	e5 e6       	ldi	r30, 0x65	; 101
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	80 81       	ld	r24, Z
     8d6:	8b 7f       	andi	r24, 0xFB	; 251
		break;
     8d8:	80 83       	st	Z, r24
		case 3:
		FND_DATA_PORT = fndFont[fndNum%10];
     8da:	36 c0       	rjmp	.+108    	; 0x948 <FND_dispNum+0x20e>
     8dc:	98 01       	movw	r18, r16
     8de:	ad ec       	ldi	r26, 0xCD	; 205
     8e0:	bc ec       	ldi	r27, 0xCC	; 204
     8e2:	32 d1       	rcall	.+612    	; 0xb48 <__umulhisi3>
     8e4:	96 95       	lsr	r25
     8e6:	87 95       	ror	r24
     8e8:	96 95       	lsr	r25
     8ea:	87 95       	ror	r24
     8ec:	96 95       	lsr	r25
     8ee:	87 95       	ror	r24
     8f0:	9c 01       	movw	r18, r24
     8f2:	22 0f       	add	r18, r18
     8f4:	33 1f       	adc	r19, r19
     8f6:	88 0f       	add	r24, r24
     8f8:	99 1f       	adc	r25, r25
     8fa:	88 0f       	add	r24, r24
     8fc:	99 1f       	adc	r25, r25
     8fe:	88 0f       	add	r24, r24
     900:	99 1f       	adc	r25, r25
     902:	82 0f       	add	r24, r18
     904:	93 1f       	adc	r25, r19
     906:	98 01       	movw	r18, r16
     908:	28 1b       	sub	r18, r24
     90a:	39 0b       	sbc	r19, r25
     90c:	e1 e0       	ldi	r30, 0x01	; 1
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	ec 0f       	add	r30, r28
     912:	fd 1f       	adc	r31, r29
     914:	e2 0f       	add	r30, r18
     916:	f3 1f       	adc	r31, r19
     918:	80 81       	ld	r24, Z
     91a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<FND_DIGIT_4); // 일의자리
     91e:	e5 e6       	ldi	r30, 0x65	; 101
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	80 81       	ld	r24, Z
     924:	87 7f       	andi	r24, 0xF7	; 247
     926:	80 83       	st	Z, r24
		break;
     928:	0f c0       	rjmp	.+30     	; 0x948 <FND_dispNum+0x20e>
		case 4:
		if (fndColonFlag) FND_DATA_PORT = fndFont[FND_DP]; // DP
     92a:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <fndColonFlag>
     92e:	88 23       	and	r24, r24
     930:	21 f0       	breq	.+8      	; 0x93a <FND_dispNum+0x200>
     932:	8b 85       	ldd	r24, Y+11	; 0x0b
     934:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     938:	02 c0       	rjmp	.+4      	; 0x93e <FND_dispNum+0x204>
		else FND_DATA_PORT = 0x00;
     93a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<FND_DIGIT_2); 
     93e:	e5 e6       	ldi	r30, 0x65	; 101
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	80 81       	ld	r24, Z
     944:	8d 7f       	andi	r24, 0xFD	; 253
     946:	80 83       	st	Z, r24
		break;
	}
}
     948:	2b 96       	adiw	r28, 0x0b	; 11
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	f8 94       	cli
     94e:	de bf       	out	0x3e, r29	; 62
     950:	0f be       	out	0x3f, r0	; 63
     952:	cd bf       	out	0x3d, r28	; 61
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	08 95       	ret

0000095e <FND_setFndData>:
//seter
void FND_setFndData(uint16_t data) // main에서 100ms마다 올린 counter
{
	fndData = data; // fndData는 FND.c에서만 사용
     95e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <fndData+0x1>
     962:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <fndData>
     966:	08 95       	ret

00000968 <FND_ISR_Process>:
}

void FND_ISR_Process()
{
	FND_dispNum(fndData);
     968:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <fndData>
     96c:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <fndData+0x1>
     970:	e4 ce       	rjmp	.-568    	; 0x73a <FND_dispNum>
     972:	08 95       	ret

00000974 <Gpio_init>:
	LCD_writeCmdData(command);
}

void LCD_displayClear()
{
	LCD_writeCmdData(LCD_DISPLAY_CLEAR);
     974:	87 b3       	in	r24, 0x17	; 23
     976:	80 6e       	ori	r24, 0xE0	; 224
     978:	87 bb       	out	0x17, r24	; 23
     97a:	8f ef       	ldi	r24, 0xFF	; 255
     97c:	84 bb       	out	0x14, r24	; 20
     97e:	08 95       	ret

00000980 <Gpio_writeControlData>:
     980:	88 bb       	out	0x18, r24	; 24
     982:	08 95       	ret

00000984 <LCD_cmdMode>:
     984:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <lcdControlData>
     988:	8f 7d       	andi	r24, 0xDF	; 223
     98a:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <lcdControlData>
     98e:	f8 cf       	rjmp	.-16     	; 0x980 <Gpio_writeControlData>
     990:	08 95       	ret

00000992 <LCD_charMode>:
     992:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <lcdControlData>
     996:	80 62       	ori	r24, 0x20	; 32
     998:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <lcdControlData>
     99c:	f1 cf       	rjmp	.-30     	; 0x980 <Gpio_writeControlData>
     99e:	08 95       	ret

000009a0 <LCD_writeMode>:
     9a0:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <lcdControlData>
     9a4:	8f 7b       	andi	r24, 0xBF	; 191
     9a6:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <lcdControlData>
     9aa:	ea cf       	rjmp	.-44     	; 0x980 <Gpio_writeControlData>
     9ac:	08 95       	ret

000009ae <LCD_enableHigh>:
     9ae:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <lcdControlData>
     9b2:	80 68       	ori	r24, 0x80	; 128
     9b4:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <lcdControlData>
     9b8:	e3 df       	rcall	.-58     	; 0x980 <Gpio_writeControlData>
     9ba:	8f e9       	ldi	r24, 0x9F	; 159
     9bc:	9f e0       	ldi	r25, 0x0F	; 15
     9be:	01 97       	sbiw	r24, 0x01	; 1
     9c0:	f1 f7       	brne	.-4      	; 0x9be <LCD_enableHigh+0x10>
     9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <LCD_enableHigh+0x16>
     9c4:	00 00       	nop
     9c6:	08 95       	ret

000009c8 <LCD_enableLow>:
     9c8:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <lcdControlData>
     9cc:	8f 77       	andi	r24, 0x7F	; 127
     9ce:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <lcdControlData>
     9d2:	d6 df       	rcall	.-84     	; 0x980 <Gpio_writeControlData>
     9d4:	8f e9       	ldi	r24, 0x9F	; 159
     9d6:	9f e0       	ldi	r25, 0x0F	; 15
     9d8:	01 97       	sbiw	r24, 0x01	; 1
     9da:	f1 f7       	brne	.-4      	; 0x9d8 <LCD_enableLow+0x10>
     9dc:	00 c0       	rjmp	.+0      	; 0x9de <LCD_enableLow+0x16>
     9de:	00 00       	nop
     9e0:	08 95       	ret

000009e2 <Gpio_writeData>:
     9e2:	85 bb       	out	0x15, r24	; 21
     9e4:	08 95       	ret

000009e6 <LCD_writeByte>:
     9e6:	fd cf       	rjmp	.-6      	; 0x9e2 <Gpio_writeData>
     9e8:	08 95       	ret

000009ea <LCD_writeCmdData>:
     9ea:	cf 93       	push	r28
     9ec:	c8 2f       	mov	r28, r24
     9ee:	ca df       	rcall	.-108    	; 0x984 <LCD_cmdMode>
     9f0:	d7 df       	rcall	.-82     	; 0x9a0 <LCD_writeMode>
     9f2:	dd df       	rcall	.-70     	; 0x9ae <LCD_enableHigh>
     9f4:	8c 2f       	mov	r24, r28
     9f6:	f7 df       	rcall	.-18     	; 0x9e6 <LCD_writeByte>
     9f8:	e7 df       	rcall	.-50     	; 0x9c8 <LCD_enableLow>
     9fa:	cf 91       	pop	r28
     9fc:	08 95       	ret

000009fe <LCD_init>:
     9fe:	ba df       	rcall	.-140    	; 0x974 <Gpio_init>
     a00:	8f e5       	ldi	r24, 0x5F	; 95
     a02:	9a ee       	ldi	r25, 0xEA	; 234
     a04:	01 97       	sbiw	r24, 0x01	; 1
     a06:	f1 f7       	brne	.-4      	; 0xa04 <LCD_init+0x6>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <LCD_init+0xc>
     a0a:	00 00       	nop
     a0c:	88 e3       	ldi	r24, 0x38	; 56
     a0e:	ed df       	rcall	.-38     	; 0x9ea <LCD_writeCmdData>
     a10:	8f e1       	ldi	r24, 0x1F	; 31
     a12:	9e e4       	ldi	r25, 0x4E	; 78
     a14:	01 97       	sbiw	r24, 0x01	; 1
     a16:	f1 f7       	brne	.-4      	; 0xa14 <LCD_init+0x16>
     a18:	00 c0       	rjmp	.+0      	; 0xa1a <LCD_init+0x1c>
     a1a:	00 00       	nop
     a1c:	88 e3       	ldi	r24, 0x38	; 56
     a1e:	e5 df       	rcall	.-54     	; 0x9ea <LCD_writeCmdData>
     a20:	8f e9       	ldi	r24, 0x9F	; 159
     a22:	9f e0       	ldi	r25, 0x0F	; 15
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	f1 f7       	brne	.-4      	; 0xa24 <LCD_init+0x26>
     a28:	00 c0       	rjmp	.+0      	; 0xa2a <LCD_init+0x2c>
     a2a:	00 00       	nop
     a2c:	88 e3       	ldi	r24, 0x38	; 56
     a2e:	dd df       	rcall	.-70     	; 0x9ea <LCD_writeCmdData>
     a30:	88 e3       	ldi	r24, 0x38	; 56
     a32:	db df       	rcall	.-74     	; 0x9ea <LCD_writeCmdData>
     a34:	88 e0       	ldi	r24, 0x08	; 8
     a36:	d9 df       	rcall	.-78     	; 0x9ea <LCD_writeCmdData>
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	d7 df       	rcall	.-82     	; 0x9ea <LCD_writeCmdData>
     a3c:	86 e0       	ldi	r24, 0x06	; 6
     a3e:	d5 df       	rcall	.-86     	; 0x9ea <LCD_writeCmdData>
     a40:	8c e0       	ldi	r24, 0x0C	; 12
     a42:	d3 cf       	rjmp	.-90     	; 0x9ea <LCD_writeCmdData>
     a44:	08 95       	ret

00000a46 <LCD_writeCharData>:
     a46:	cf 93       	push	r28
     a48:	c8 2f       	mov	r28, r24
     a4a:	a3 df       	rcall	.-186    	; 0x992 <LCD_charMode>
     a4c:	a9 df       	rcall	.-174    	; 0x9a0 <LCD_writeMode>
     a4e:	af df       	rcall	.-162    	; 0x9ae <LCD_enableHigh>
     a50:	8c 2f       	mov	r24, r28
     a52:	c9 df       	rcall	.-110    	; 0x9e6 <LCD_writeByte>
     a54:	b9 df       	rcall	.-142    	; 0x9c8 <LCD_enableLow>
     a56:	cf 91       	pop	r28
     a58:	08 95       	ret

00000a5a <LCD_writeString>:
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	8c 01       	movw	r16, r24
     a64:	c0 e0       	ldi	r28, 0x00	; 0
     a66:	d0 e0       	ldi	r29, 0x00	; 0
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <LCD_writeString+0x14>
     a6a:	ed df       	rcall	.-38     	; 0xa46 <LCD_writeCharData>
     a6c:	21 96       	adiw	r28, 0x01	; 1
     a6e:	f8 01       	movw	r30, r16
     a70:	ec 0f       	add	r30, r28
     a72:	fd 1f       	adc	r31, r29
     a74:	80 81       	ld	r24, Z
     a76:	81 11       	cpse	r24, r1
     a78:	f8 cf       	rjmp	.-16     	; 0xa6a <LCD_writeString+0x10>
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	1f 91       	pop	r17
     a80:	0f 91       	pop	r16
     a82:	08 95       	ret

00000a84 <LCD_gotoXY>:
     a84:	6f 70       	andi	r22, 0x0F	; 15
     a86:	81 70       	andi	r24, 0x01	; 1
     a88:	90 e4       	ldi	r25, 0x40	; 64
     a8a:	89 9f       	mul	r24, r25
     a8c:	60 0d       	add	r22, r0
     a8e:	11 24       	eor	r1, r1
     a90:	86 2f       	mov	r24, r22
     a92:	80 58       	subi	r24, 0x80	; 128
     a94:	aa cf       	rjmp	.-172    	; 0x9ea <LCD_writeCmdData>
     a96:	08 95       	ret

00000a98 <LCD_writeStringXY>:
}
void LCD_writeStringXY(uint8_t row, uint8_t col, char *str)
{
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	ea 01       	movw	r28, r20
	LCD_gotoXY(row, col);
     a9e:	f2 df       	rcall	.-28     	; 0xa84 <LCD_gotoXY>
	LCD_writeString(str);
     aa0:	ce 01       	movw	r24, r28
     aa2:	db df       	rcall	.-74     	; 0xa5a <LCD_writeString>
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <main>:
#include <avr/io.h>
#include "AP/apMain.h"

int main(void)
{
	apMain_init();
     aaa:	60 db       	rcall	.-2368   	; 0x16c <apMain_init>
	
    while (1) 
    {
		apMain_excute();
     aac:	6d db       	rcall	.-2342   	; 0x188 <apMain_excute>
     aae:	fe cf       	rjmp	.-4      	; 0xaac <main+0x2>

00000ab0 <GPIO_initPin>:
     ab0:	fc 01       	movw	r30, r24
}

uint8_t GPIO_readPort(volatile uint8_t *PIN)
{
	return *PIN;
}
     ab2:	41 30       	cpi	r20, 0x01	; 1
     ab4:	59 f4       	brne	.+22     	; 0xacc <GPIO_initPin+0x1c>
     ab6:	20 81       	ld	r18, Z
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <GPIO_initPin+0x12>
     abe:	88 0f       	add	r24, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	6a 95       	dec	r22
     ac4:	e2 f7       	brpl	.-8      	; 0xabe <GPIO_initPin+0xe>
     ac6:	82 2b       	or	r24, r18
     ac8:	80 83       	st	Z, r24
     aca:	08 95       	ret
     acc:	90 81       	ld	r25, Z
     ace:	21 e0       	ldi	r18, 0x01	; 1
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	02 c0       	rjmp	.+4      	; 0xad8 <GPIO_initPin+0x28>
     ad4:	22 0f       	add	r18, r18
     ad6:	33 1f       	adc	r19, r19
     ad8:	6a 95       	dec	r22
     ada:	e2 f7       	brpl	.-8      	; 0xad4 <GPIO_initPin+0x24>
     adc:	20 95       	com	r18
     ade:	29 23       	and	r18, r25
     ae0:	20 83       	st	Z, r18
     ae2:	08 95       	ret

00000ae4 <GPIO_readPin>:

uint8_t GPIO_readPin(volatile uint8_t *PIN, uint8_t pinNum)
{
	return ((*PIN & (1<<pinNum)) != 0); // 예를들어 버튼이0b000x0000이면 0인지 아닌지 비교
     ae4:	fc 01       	movw	r30, r24
     ae6:	80 81       	ld	r24, Z
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <GPIO_readPin+0xc>
     aec:	95 95       	asr	r25
     aee:	87 95       	ror	r24
     af0:	6a 95       	dec	r22
     af2:	e2 f7       	brpl	.-8      	; 0xaec <GPIO_readPin+0x8>
     af4:	81 70       	andi	r24, 0x01	; 1
     af6:	08 95       	ret

00000af8 <TIM0_init>:
﻿#include "Timer.h"

void TIM0_init() // 1ms Overflow Interrupt, Display
{
	TCCR0 |= ((1<<CS02) | (0<<CS01) | (1<<CS00)); // 128 PreScaler xxxxxxxx -> xxxxx101
     af8:	83 b7       	in	r24, 0x33	; 51
     afa:	85 60       	ori	r24, 0x05	; 5
     afc:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0); // TIMSK Timer/Counter0 Overflow Interrupt Enable
     afe:	87 b7       	in	r24, 0x37	; 55
     b00:	81 60       	ori	r24, 0x01	; 1
     b02:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 130; // 1ms마다 interrupt발생
     b04:	82 e8       	ldi	r24, 0x82	; 130
     b06:	82 bf       	out	0x32, r24	; 50
     b08:	08 95       	ret

00000b0a <TIM2_init>:
}

void TIM2_init() // 1ms CTC mode Interrupt, Time
{
	TCCR2 |= ((0<<CS22) | (1<<CS21) | (1<<CS20)); // 64 PreScaler
     b0a:	85 b5       	in	r24, 0x25	; 37
     b0c:	83 60       	ori	r24, 0x03	; 3
     b0e:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= ((1<<WGM21)|(0<<WGM20)); // CTC Mode 
     b10:	85 b5       	in	r24, 0x25	; 37
     b12:	88 60       	ori	r24, 0x08	; 8
     b14:	85 bd       	out	0x25, r24	; 37
	TIMSK |= ((1<<OCIE2)); // Timer/Counter2 Output Compare Interrupt Enable
     b16:	87 b7       	in	r24, 0x37	; 55
     b18:	80 68       	ori	r24, 0x80	; 128
     b1a:	87 bf       	out	0x37, r24	; 55
	OCR2 = 250 - 1; // 1ms마다 interrupt발생
     b1c:	89 ef       	ldi	r24, 0xF9	; 249
     b1e:	83 bd       	out	0x23, r24	; 35
     b20:	08 95       	ret

00000b22 <__divmodhi4>:
     b22:	97 fb       	bst	r25, 7
     b24:	07 2e       	mov	r0, r23
     b26:	16 f4       	brtc	.+4      	; 0xb2c <__divmodhi4+0xa>
     b28:	00 94       	com	r0
     b2a:	06 d0       	rcall	.+12     	; 0xb38 <__divmodhi4_neg1>
     b2c:	77 fd       	sbrc	r23, 7
     b2e:	08 d0       	rcall	.+16     	; 0xb40 <__divmodhi4_neg2>
     b30:	1a d0       	rcall	.+52     	; 0xb66 <__udivmodhi4>
     b32:	07 fc       	sbrc	r0, 7
     b34:	05 d0       	rcall	.+10     	; 0xb40 <__divmodhi4_neg2>
     b36:	3e f4       	brtc	.+14     	; 0xb46 <__divmodhi4_exit>

00000b38 <__divmodhi4_neg1>:
     b38:	90 95       	com	r25
     b3a:	81 95       	neg	r24
     b3c:	9f 4f       	sbci	r25, 0xFF	; 255
     b3e:	08 95       	ret

00000b40 <__divmodhi4_neg2>:
     b40:	70 95       	com	r23
     b42:	61 95       	neg	r22
     b44:	7f 4f       	sbci	r23, 0xFF	; 255

00000b46 <__divmodhi4_exit>:
     b46:	08 95       	ret

00000b48 <__umulhisi3>:
     b48:	a2 9f       	mul	r26, r18
     b4a:	b0 01       	movw	r22, r0
     b4c:	b3 9f       	mul	r27, r19
     b4e:	c0 01       	movw	r24, r0
     b50:	a3 9f       	mul	r26, r19
     b52:	70 0d       	add	r23, r0
     b54:	81 1d       	adc	r24, r1
     b56:	11 24       	eor	r1, r1
     b58:	91 1d       	adc	r25, r1
     b5a:	b2 9f       	mul	r27, r18
     b5c:	70 0d       	add	r23, r0
     b5e:	81 1d       	adc	r24, r1
     b60:	11 24       	eor	r1, r1
     b62:	91 1d       	adc	r25, r1
     b64:	08 95       	ret

00000b66 <__udivmodhi4>:
     b66:	aa 1b       	sub	r26, r26
     b68:	bb 1b       	sub	r27, r27
     b6a:	51 e1       	ldi	r21, 0x11	; 17
     b6c:	07 c0       	rjmp	.+14     	; 0xb7c <__udivmodhi4_ep>

00000b6e <__udivmodhi4_loop>:
     b6e:	aa 1f       	adc	r26, r26
     b70:	bb 1f       	adc	r27, r27
     b72:	a6 17       	cp	r26, r22
     b74:	b7 07       	cpc	r27, r23
     b76:	10 f0       	brcs	.+4      	; 0xb7c <__udivmodhi4_ep>
     b78:	a6 1b       	sub	r26, r22
     b7a:	b7 0b       	sbc	r27, r23

00000b7c <__udivmodhi4_ep>:
     b7c:	88 1f       	adc	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	5a 95       	dec	r21
     b82:	a9 f7       	brne	.-22     	; 0xb6e <__udivmodhi4_loop>
     b84:	80 95       	com	r24
     b86:	90 95       	com	r25
     b88:	bc 01       	movw	r22, r24
     b8a:	cd 01       	movw	r24, r26
     b8c:	08 95       	ret

00000b8e <sprintf>:
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	2e 97       	sbiw	r28, 0x0e	; 14
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	de bf       	out	0x3e, r29	; 62
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	cd bf       	out	0x3d, r28	; 61
     ba6:	0d 89       	ldd	r16, Y+21	; 0x15
     ba8:	1e 89       	ldd	r17, Y+22	; 0x16
     baa:	86 e0       	ldi	r24, 0x06	; 6
     bac:	8c 83       	std	Y+4, r24	; 0x04
     bae:	1a 83       	std	Y+2, r17	; 0x02
     bb0:	09 83       	std	Y+1, r16	; 0x01
     bb2:	8f ef       	ldi	r24, 0xFF	; 255
     bb4:	9f e7       	ldi	r25, 0x7F	; 127
     bb6:	9e 83       	std	Y+6, r25	; 0x06
     bb8:	8d 83       	std	Y+5, r24	; 0x05
     bba:	ae 01       	movw	r20, r28
     bbc:	47 5e       	subi	r20, 0xE7	; 231
     bbe:	5f 4f       	sbci	r21, 0xFF	; 255
     bc0:	6f 89       	ldd	r22, Y+23	; 0x17
     bc2:	78 8d       	ldd	r23, Y+24	; 0x18
     bc4:	ce 01       	movw	r24, r28
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	10 d0       	rcall	.+32     	; 0xbea <vfprintf>
     bca:	ef 81       	ldd	r30, Y+7	; 0x07
     bcc:	f8 85       	ldd	r31, Y+8	; 0x08
     bce:	e0 0f       	add	r30, r16
     bd0:	f1 1f       	adc	r31, r17
     bd2:	10 82       	st	Z, r1
     bd4:	2e 96       	adiw	r28, 0x0e	; 14
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	f8 94       	cli
     bda:	de bf       	out	0x3e, r29	; 62
     bdc:	0f be       	out	0x3f, r0	; 63
     bde:	cd bf       	out	0x3d, r28	; 61
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	08 95       	ret

00000bea <vfprintf>:
     bea:	2f 92       	push	r2
     bec:	3f 92       	push	r3
     bee:	4f 92       	push	r4
     bf0:	5f 92       	push	r5
     bf2:	6f 92       	push	r6
     bf4:	7f 92       	push	r7
     bf6:	8f 92       	push	r8
     bf8:	9f 92       	push	r9
     bfa:	af 92       	push	r10
     bfc:	bf 92       	push	r11
     bfe:	cf 92       	push	r12
     c00:	df 92       	push	r13
     c02:	ef 92       	push	r14
     c04:	ff 92       	push	r15
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	2b 97       	sbiw	r28, 0x0b	; 11
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	de bf       	out	0x3e, r29	; 62
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	cd bf       	out	0x3d, r28	; 61
     c1e:	6c 01       	movw	r12, r24
     c20:	7b 01       	movw	r14, r22
     c22:	8a 01       	movw	r16, r20
     c24:	fc 01       	movw	r30, r24
     c26:	17 82       	std	Z+7, r1	; 0x07
     c28:	16 82       	std	Z+6, r1	; 0x06
     c2a:	83 81       	ldd	r24, Z+3	; 0x03
     c2c:	81 ff       	sbrs	r24, 1
     c2e:	bf c1       	rjmp	.+894    	; 0xfae <vfprintf+0x3c4>
     c30:	ce 01       	movw	r24, r28
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	3c 01       	movw	r6, r24
     c36:	f6 01       	movw	r30, r12
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	f7 01       	movw	r30, r14
     c3c:	93 fd       	sbrc	r25, 3
     c3e:	85 91       	lpm	r24, Z+
     c40:	93 ff       	sbrs	r25, 3
     c42:	81 91       	ld	r24, Z+
     c44:	7f 01       	movw	r14, r30
     c46:	88 23       	and	r24, r24
     c48:	09 f4       	brne	.+2      	; 0xc4c <vfprintf+0x62>
     c4a:	ad c1       	rjmp	.+858    	; 0xfa6 <vfprintf+0x3bc>
     c4c:	85 32       	cpi	r24, 0x25	; 37
     c4e:	39 f4       	brne	.+14     	; 0xc5e <vfprintf+0x74>
     c50:	93 fd       	sbrc	r25, 3
     c52:	85 91       	lpm	r24, Z+
     c54:	93 ff       	sbrs	r25, 3
     c56:	81 91       	ld	r24, Z+
     c58:	7f 01       	movw	r14, r30
     c5a:	85 32       	cpi	r24, 0x25	; 37
     c5c:	21 f4       	brne	.+8      	; 0xc66 <vfprintf+0x7c>
     c5e:	b6 01       	movw	r22, r12
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	d6 d1       	rcall	.+940    	; 0x1010 <fputc>
     c64:	e8 cf       	rjmp	.-48     	; 0xc36 <vfprintf+0x4c>
     c66:	91 2c       	mov	r9, r1
     c68:	21 2c       	mov	r2, r1
     c6a:	31 2c       	mov	r3, r1
     c6c:	ff e1       	ldi	r31, 0x1F	; 31
     c6e:	f3 15       	cp	r31, r3
     c70:	d8 f0       	brcs	.+54     	; 0xca8 <vfprintf+0xbe>
     c72:	8b 32       	cpi	r24, 0x2B	; 43
     c74:	79 f0       	breq	.+30     	; 0xc94 <vfprintf+0xaa>
     c76:	38 f4       	brcc	.+14     	; 0xc86 <vfprintf+0x9c>
     c78:	80 32       	cpi	r24, 0x20	; 32
     c7a:	79 f0       	breq	.+30     	; 0xc9a <vfprintf+0xb0>
     c7c:	83 32       	cpi	r24, 0x23	; 35
     c7e:	a1 f4       	brne	.+40     	; 0xca8 <vfprintf+0xbe>
     c80:	23 2d       	mov	r18, r3
     c82:	20 61       	ori	r18, 0x10	; 16
     c84:	1d c0       	rjmp	.+58     	; 0xcc0 <vfprintf+0xd6>
     c86:	8d 32       	cpi	r24, 0x2D	; 45
     c88:	61 f0       	breq	.+24     	; 0xca2 <vfprintf+0xb8>
     c8a:	80 33       	cpi	r24, 0x30	; 48
     c8c:	69 f4       	brne	.+26     	; 0xca8 <vfprintf+0xbe>
     c8e:	23 2d       	mov	r18, r3
     c90:	21 60       	ori	r18, 0x01	; 1
     c92:	16 c0       	rjmp	.+44     	; 0xcc0 <vfprintf+0xd6>
     c94:	83 2d       	mov	r24, r3
     c96:	82 60       	ori	r24, 0x02	; 2
     c98:	38 2e       	mov	r3, r24
     c9a:	e3 2d       	mov	r30, r3
     c9c:	e4 60       	ori	r30, 0x04	; 4
     c9e:	3e 2e       	mov	r3, r30
     ca0:	2a c0       	rjmp	.+84     	; 0xcf6 <vfprintf+0x10c>
     ca2:	f3 2d       	mov	r31, r3
     ca4:	f8 60       	ori	r31, 0x08	; 8
     ca6:	1d c0       	rjmp	.+58     	; 0xce2 <vfprintf+0xf8>
     ca8:	37 fc       	sbrc	r3, 7
     caa:	2d c0       	rjmp	.+90     	; 0xd06 <vfprintf+0x11c>
     cac:	20 ed       	ldi	r18, 0xD0	; 208
     cae:	28 0f       	add	r18, r24
     cb0:	2a 30       	cpi	r18, 0x0A	; 10
     cb2:	40 f0       	brcs	.+16     	; 0xcc4 <vfprintf+0xda>
     cb4:	8e 32       	cpi	r24, 0x2E	; 46
     cb6:	b9 f4       	brne	.+46     	; 0xce6 <vfprintf+0xfc>
     cb8:	36 fc       	sbrc	r3, 6
     cba:	75 c1       	rjmp	.+746    	; 0xfa6 <vfprintf+0x3bc>
     cbc:	23 2d       	mov	r18, r3
     cbe:	20 64       	ori	r18, 0x40	; 64
     cc0:	32 2e       	mov	r3, r18
     cc2:	19 c0       	rjmp	.+50     	; 0xcf6 <vfprintf+0x10c>
     cc4:	36 fe       	sbrs	r3, 6
     cc6:	06 c0       	rjmp	.+12     	; 0xcd4 <vfprintf+0xea>
     cc8:	8a e0       	ldi	r24, 0x0A	; 10
     cca:	98 9e       	mul	r9, r24
     ccc:	20 0d       	add	r18, r0
     cce:	11 24       	eor	r1, r1
     cd0:	92 2e       	mov	r9, r18
     cd2:	11 c0       	rjmp	.+34     	; 0xcf6 <vfprintf+0x10c>
     cd4:	ea e0       	ldi	r30, 0x0A	; 10
     cd6:	2e 9e       	mul	r2, r30
     cd8:	20 0d       	add	r18, r0
     cda:	11 24       	eor	r1, r1
     cdc:	22 2e       	mov	r2, r18
     cde:	f3 2d       	mov	r31, r3
     ce0:	f0 62       	ori	r31, 0x20	; 32
     ce2:	3f 2e       	mov	r3, r31
     ce4:	08 c0       	rjmp	.+16     	; 0xcf6 <vfprintf+0x10c>
     ce6:	8c 36       	cpi	r24, 0x6C	; 108
     ce8:	21 f4       	brne	.+8      	; 0xcf2 <vfprintf+0x108>
     cea:	83 2d       	mov	r24, r3
     cec:	80 68       	ori	r24, 0x80	; 128
     cee:	38 2e       	mov	r3, r24
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <vfprintf+0x10c>
     cf2:	88 36       	cpi	r24, 0x68	; 104
     cf4:	41 f4       	brne	.+16     	; 0xd06 <vfprintf+0x11c>
     cf6:	f7 01       	movw	r30, r14
     cf8:	93 fd       	sbrc	r25, 3
     cfa:	85 91       	lpm	r24, Z+
     cfc:	93 ff       	sbrs	r25, 3
     cfe:	81 91       	ld	r24, Z+
     d00:	7f 01       	movw	r14, r30
     d02:	81 11       	cpse	r24, r1
     d04:	b3 cf       	rjmp	.-154    	; 0xc6c <vfprintf+0x82>
     d06:	98 2f       	mov	r25, r24
     d08:	9f 7d       	andi	r25, 0xDF	; 223
     d0a:	95 54       	subi	r25, 0x45	; 69
     d0c:	93 30       	cpi	r25, 0x03	; 3
     d0e:	28 f4       	brcc	.+10     	; 0xd1a <vfprintf+0x130>
     d10:	0c 5f       	subi	r16, 0xFC	; 252
     d12:	1f 4f       	sbci	r17, 0xFF	; 255
     d14:	9f e3       	ldi	r25, 0x3F	; 63
     d16:	99 83       	std	Y+1, r25	; 0x01
     d18:	0d c0       	rjmp	.+26     	; 0xd34 <vfprintf+0x14a>
     d1a:	83 36       	cpi	r24, 0x63	; 99
     d1c:	31 f0       	breq	.+12     	; 0xd2a <vfprintf+0x140>
     d1e:	83 37       	cpi	r24, 0x73	; 115
     d20:	71 f0       	breq	.+28     	; 0xd3e <vfprintf+0x154>
     d22:	83 35       	cpi	r24, 0x53	; 83
     d24:	09 f0       	breq	.+2      	; 0xd28 <vfprintf+0x13e>
     d26:	55 c0       	rjmp	.+170    	; 0xdd2 <vfprintf+0x1e8>
     d28:	20 c0       	rjmp	.+64     	; 0xd6a <vfprintf+0x180>
     d2a:	f8 01       	movw	r30, r16
     d2c:	80 81       	ld	r24, Z
     d2e:	89 83       	std	Y+1, r24	; 0x01
     d30:	0e 5f       	subi	r16, 0xFE	; 254
     d32:	1f 4f       	sbci	r17, 0xFF	; 255
     d34:	88 24       	eor	r8, r8
     d36:	83 94       	inc	r8
     d38:	91 2c       	mov	r9, r1
     d3a:	53 01       	movw	r10, r6
     d3c:	12 c0       	rjmp	.+36     	; 0xd62 <vfprintf+0x178>
     d3e:	28 01       	movw	r4, r16
     d40:	f2 e0       	ldi	r31, 0x02	; 2
     d42:	4f 0e       	add	r4, r31
     d44:	51 1c       	adc	r5, r1
     d46:	f8 01       	movw	r30, r16
     d48:	a0 80       	ld	r10, Z
     d4a:	b1 80       	ldd	r11, Z+1	; 0x01
     d4c:	36 fe       	sbrs	r3, 6
     d4e:	03 c0       	rjmp	.+6      	; 0xd56 <vfprintf+0x16c>
     d50:	69 2d       	mov	r22, r9
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <vfprintf+0x170>
     d56:	6f ef       	ldi	r22, 0xFF	; 255
     d58:	7f ef       	ldi	r23, 0xFF	; 255
     d5a:	c5 01       	movw	r24, r10
     d5c:	4e d1       	rcall	.+668    	; 0xffa <strnlen>
     d5e:	4c 01       	movw	r8, r24
     d60:	82 01       	movw	r16, r4
     d62:	f3 2d       	mov	r31, r3
     d64:	ff 77       	andi	r31, 0x7F	; 127
     d66:	3f 2e       	mov	r3, r31
     d68:	15 c0       	rjmp	.+42     	; 0xd94 <vfprintf+0x1aa>
     d6a:	28 01       	movw	r4, r16
     d6c:	22 e0       	ldi	r18, 0x02	; 2
     d6e:	42 0e       	add	r4, r18
     d70:	51 1c       	adc	r5, r1
     d72:	f8 01       	movw	r30, r16
     d74:	a0 80       	ld	r10, Z
     d76:	b1 80       	ldd	r11, Z+1	; 0x01
     d78:	36 fe       	sbrs	r3, 6
     d7a:	03 c0       	rjmp	.+6      	; 0xd82 <vfprintf+0x198>
     d7c:	69 2d       	mov	r22, r9
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <vfprintf+0x19c>
     d82:	6f ef       	ldi	r22, 0xFF	; 255
     d84:	7f ef       	ldi	r23, 0xFF	; 255
     d86:	c5 01       	movw	r24, r10
     d88:	2d d1       	rcall	.+602    	; 0xfe4 <strnlen_P>
     d8a:	4c 01       	movw	r8, r24
     d8c:	f3 2d       	mov	r31, r3
     d8e:	f0 68       	ori	r31, 0x80	; 128
     d90:	3f 2e       	mov	r3, r31
     d92:	82 01       	movw	r16, r4
     d94:	33 fc       	sbrc	r3, 3
     d96:	19 c0       	rjmp	.+50     	; 0xdca <vfprintf+0x1e0>
     d98:	82 2d       	mov	r24, r2
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	88 16       	cp	r8, r24
     d9e:	99 06       	cpc	r9, r25
     da0:	a0 f4       	brcc	.+40     	; 0xdca <vfprintf+0x1e0>
     da2:	b6 01       	movw	r22, r12
     da4:	80 e2       	ldi	r24, 0x20	; 32
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	33 d1       	rcall	.+614    	; 0x1010 <fputc>
     daa:	2a 94       	dec	r2
     dac:	f5 cf       	rjmp	.-22     	; 0xd98 <vfprintf+0x1ae>
     dae:	f5 01       	movw	r30, r10
     db0:	37 fc       	sbrc	r3, 7
     db2:	85 91       	lpm	r24, Z+
     db4:	37 fe       	sbrs	r3, 7
     db6:	81 91       	ld	r24, Z+
     db8:	5f 01       	movw	r10, r30
     dba:	b6 01       	movw	r22, r12
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	28 d1       	rcall	.+592    	; 0x1010 <fputc>
     dc0:	21 10       	cpse	r2, r1
     dc2:	2a 94       	dec	r2
     dc4:	21 e0       	ldi	r18, 0x01	; 1
     dc6:	82 1a       	sub	r8, r18
     dc8:	91 08       	sbc	r9, r1
     dca:	81 14       	cp	r8, r1
     dcc:	91 04       	cpc	r9, r1
     dce:	79 f7       	brne	.-34     	; 0xdae <vfprintf+0x1c4>
     dd0:	e1 c0       	rjmp	.+450    	; 0xf94 <vfprintf+0x3aa>
     dd2:	84 36       	cpi	r24, 0x64	; 100
     dd4:	11 f0       	breq	.+4      	; 0xdda <vfprintf+0x1f0>
     dd6:	89 36       	cpi	r24, 0x69	; 105
     dd8:	39 f5       	brne	.+78     	; 0xe28 <vfprintf+0x23e>
     dda:	f8 01       	movw	r30, r16
     ddc:	37 fe       	sbrs	r3, 7
     dde:	07 c0       	rjmp	.+14     	; 0xdee <vfprintf+0x204>
     de0:	60 81       	ld	r22, Z
     de2:	71 81       	ldd	r23, Z+1	; 0x01
     de4:	82 81       	ldd	r24, Z+2	; 0x02
     de6:	93 81       	ldd	r25, Z+3	; 0x03
     de8:	0c 5f       	subi	r16, 0xFC	; 252
     dea:	1f 4f       	sbci	r17, 0xFF	; 255
     dec:	08 c0       	rjmp	.+16     	; 0xdfe <vfprintf+0x214>
     dee:	60 81       	ld	r22, Z
     df0:	71 81       	ldd	r23, Z+1	; 0x01
     df2:	07 2e       	mov	r0, r23
     df4:	00 0c       	add	r0, r0
     df6:	88 0b       	sbc	r24, r24
     df8:	99 0b       	sbc	r25, r25
     dfa:	0e 5f       	subi	r16, 0xFE	; 254
     dfc:	1f 4f       	sbci	r17, 0xFF	; 255
     dfe:	f3 2d       	mov	r31, r3
     e00:	ff 76       	andi	r31, 0x6F	; 111
     e02:	3f 2e       	mov	r3, r31
     e04:	97 ff       	sbrs	r25, 7
     e06:	09 c0       	rjmp	.+18     	; 0xe1a <vfprintf+0x230>
     e08:	90 95       	com	r25
     e0a:	80 95       	com	r24
     e0c:	70 95       	com	r23
     e0e:	61 95       	neg	r22
     e10:	7f 4f       	sbci	r23, 0xFF	; 255
     e12:	8f 4f       	sbci	r24, 0xFF	; 255
     e14:	9f 4f       	sbci	r25, 0xFF	; 255
     e16:	f0 68       	ori	r31, 0x80	; 128
     e18:	3f 2e       	mov	r3, r31
     e1a:	2a e0       	ldi	r18, 0x0A	; 10
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	a3 01       	movw	r20, r6
     e20:	33 d1       	rcall	.+614    	; 0x1088 <__ultoa_invert>
     e22:	88 2e       	mov	r8, r24
     e24:	86 18       	sub	r8, r6
     e26:	44 c0       	rjmp	.+136    	; 0xeb0 <vfprintf+0x2c6>
     e28:	85 37       	cpi	r24, 0x75	; 117
     e2a:	31 f4       	brne	.+12     	; 0xe38 <vfprintf+0x24e>
     e2c:	23 2d       	mov	r18, r3
     e2e:	2f 7e       	andi	r18, 0xEF	; 239
     e30:	b2 2e       	mov	r11, r18
     e32:	2a e0       	ldi	r18, 0x0A	; 10
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	25 c0       	rjmp	.+74     	; 0xe82 <vfprintf+0x298>
     e38:	93 2d       	mov	r25, r3
     e3a:	99 7f       	andi	r25, 0xF9	; 249
     e3c:	b9 2e       	mov	r11, r25
     e3e:	8f 36       	cpi	r24, 0x6F	; 111
     e40:	c1 f0       	breq	.+48     	; 0xe72 <vfprintf+0x288>
     e42:	18 f4       	brcc	.+6      	; 0xe4a <vfprintf+0x260>
     e44:	88 35       	cpi	r24, 0x58	; 88
     e46:	79 f0       	breq	.+30     	; 0xe66 <vfprintf+0x27c>
     e48:	ae c0       	rjmp	.+348    	; 0xfa6 <vfprintf+0x3bc>
     e4a:	80 37       	cpi	r24, 0x70	; 112
     e4c:	19 f0       	breq	.+6      	; 0xe54 <vfprintf+0x26a>
     e4e:	88 37       	cpi	r24, 0x78	; 120
     e50:	21 f0       	breq	.+8      	; 0xe5a <vfprintf+0x270>
     e52:	a9 c0       	rjmp	.+338    	; 0xfa6 <vfprintf+0x3bc>
     e54:	e9 2f       	mov	r30, r25
     e56:	e0 61       	ori	r30, 0x10	; 16
     e58:	be 2e       	mov	r11, r30
     e5a:	b4 fe       	sbrs	r11, 4
     e5c:	0d c0       	rjmp	.+26     	; 0xe78 <vfprintf+0x28e>
     e5e:	fb 2d       	mov	r31, r11
     e60:	f4 60       	ori	r31, 0x04	; 4
     e62:	bf 2e       	mov	r11, r31
     e64:	09 c0       	rjmp	.+18     	; 0xe78 <vfprintf+0x28e>
     e66:	34 fe       	sbrs	r3, 4
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <vfprintf+0x294>
     e6a:	29 2f       	mov	r18, r25
     e6c:	26 60       	ori	r18, 0x06	; 6
     e6e:	b2 2e       	mov	r11, r18
     e70:	06 c0       	rjmp	.+12     	; 0xe7e <vfprintf+0x294>
     e72:	28 e0       	ldi	r18, 0x08	; 8
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	05 c0       	rjmp	.+10     	; 0xe82 <vfprintf+0x298>
     e78:	20 e1       	ldi	r18, 0x10	; 16
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <vfprintf+0x298>
     e7e:	20 e1       	ldi	r18, 0x10	; 16
     e80:	32 e0       	ldi	r19, 0x02	; 2
     e82:	f8 01       	movw	r30, r16
     e84:	b7 fe       	sbrs	r11, 7
     e86:	07 c0       	rjmp	.+14     	; 0xe96 <vfprintf+0x2ac>
     e88:	60 81       	ld	r22, Z
     e8a:	71 81       	ldd	r23, Z+1	; 0x01
     e8c:	82 81       	ldd	r24, Z+2	; 0x02
     e8e:	93 81       	ldd	r25, Z+3	; 0x03
     e90:	0c 5f       	subi	r16, 0xFC	; 252
     e92:	1f 4f       	sbci	r17, 0xFF	; 255
     e94:	06 c0       	rjmp	.+12     	; 0xea2 <vfprintf+0x2b8>
     e96:	60 81       	ld	r22, Z
     e98:	71 81       	ldd	r23, Z+1	; 0x01
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 5f       	subi	r16, 0xFE	; 254
     ea0:	1f 4f       	sbci	r17, 0xFF	; 255
     ea2:	a3 01       	movw	r20, r6
     ea4:	f1 d0       	rcall	.+482    	; 0x1088 <__ultoa_invert>
     ea6:	88 2e       	mov	r8, r24
     ea8:	86 18       	sub	r8, r6
     eaa:	fb 2d       	mov	r31, r11
     eac:	ff 77       	andi	r31, 0x7F	; 127
     eae:	3f 2e       	mov	r3, r31
     eb0:	36 fe       	sbrs	r3, 6
     eb2:	0d c0       	rjmp	.+26     	; 0xece <vfprintf+0x2e4>
     eb4:	23 2d       	mov	r18, r3
     eb6:	2e 7f       	andi	r18, 0xFE	; 254
     eb8:	a2 2e       	mov	r10, r18
     eba:	89 14       	cp	r8, r9
     ebc:	58 f4       	brcc	.+22     	; 0xed4 <vfprintf+0x2ea>
     ebe:	34 fe       	sbrs	r3, 4
     ec0:	0b c0       	rjmp	.+22     	; 0xed8 <vfprintf+0x2ee>
     ec2:	32 fc       	sbrc	r3, 2
     ec4:	09 c0       	rjmp	.+18     	; 0xed8 <vfprintf+0x2ee>
     ec6:	83 2d       	mov	r24, r3
     ec8:	8e 7e       	andi	r24, 0xEE	; 238
     eca:	a8 2e       	mov	r10, r24
     ecc:	05 c0       	rjmp	.+10     	; 0xed8 <vfprintf+0x2ee>
     ece:	b8 2c       	mov	r11, r8
     ed0:	a3 2c       	mov	r10, r3
     ed2:	03 c0       	rjmp	.+6      	; 0xeda <vfprintf+0x2f0>
     ed4:	b8 2c       	mov	r11, r8
     ed6:	01 c0       	rjmp	.+2      	; 0xeda <vfprintf+0x2f0>
     ed8:	b9 2c       	mov	r11, r9
     eda:	a4 fe       	sbrs	r10, 4
     edc:	0f c0       	rjmp	.+30     	; 0xefc <vfprintf+0x312>
     ede:	fe 01       	movw	r30, r28
     ee0:	e8 0d       	add	r30, r8
     ee2:	f1 1d       	adc	r31, r1
     ee4:	80 81       	ld	r24, Z
     ee6:	80 33       	cpi	r24, 0x30	; 48
     ee8:	21 f4       	brne	.+8      	; 0xef2 <vfprintf+0x308>
     eea:	9a 2d       	mov	r25, r10
     eec:	99 7e       	andi	r25, 0xE9	; 233
     eee:	a9 2e       	mov	r10, r25
     ef0:	09 c0       	rjmp	.+18     	; 0xf04 <vfprintf+0x31a>
     ef2:	a2 fe       	sbrs	r10, 2
     ef4:	06 c0       	rjmp	.+12     	; 0xf02 <vfprintf+0x318>
     ef6:	b3 94       	inc	r11
     ef8:	b3 94       	inc	r11
     efa:	04 c0       	rjmp	.+8      	; 0xf04 <vfprintf+0x31a>
     efc:	8a 2d       	mov	r24, r10
     efe:	86 78       	andi	r24, 0x86	; 134
     f00:	09 f0       	breq	.+2      	; 0xf04 <vfprintf+0x31a>
     f02:	b3 94       	inc	r11
     f04:	a3 fc       	sbrc	r10, 3
     f06:	10 c0       	rjmp	.+32     	; 0xf28 <vfprintf+0x33e>
     f08:	a0 fe       	sbrs	r10, 0
     f0a:	06 c0       	rjmp	.+12     	; 0xf18 <vfprintf+0x32e>
     f0c:	b2 14       	cp	r11, r2
     f0e:	80 f4       	brcc	.+32     	; 0xf30 <vfprintf+0x346>
     f10:	28 0c       	add	r2, r8
     f12:	92 2c       	mov	r9, r2
     f14:	9b 18       	sub	r9, r11
     f16:	0d c0       	rjmp	.+26     	; 0xf32 <vfprintf+0x348>
     f18:	b2 14       	cp	r11, r2
     f1a:	58 f4       	brcc	.+22     	; 0xf32 <vfprintf+0x348>
     f1c:	b6 01       	movw	r22, r12
     f1e:	80 e2       	ldi	r24, 0x20	; 32
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	76 d0       	rcall	.+236    	; 0x1010 <fputc>
     f24:	b3 94       	inc	r11
     f26:	f8 cf       	rjmp	.-16     	; 0xf18 <vfprintf+0x32e>
     f28:	b2 14       	cp	r11, r2
     f2a:	18 f4       	brcc	.+6      	; 0xf32 <vfprintf+0x348>
     f2c:	2b 18       	sub	r2, r11
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <vfprintf+0x34a>
     f30:	98 2c       	mov	r9, r8
     f32:	21 2c       	mov	r2, r1
     f34:	a4 fe       	sbrs	r10, 4
     f36:	0f c0       	rjmp	.+30     	; 0xf56 <vfprintf+0x36c>
     f38:	b6 01       	movw	r22, r12
     f3a:	80 e3       	ldi	r24, 0x30	; 48
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	68 d0       	rcall	.+208    	; 0x1010 <fputc>
     f40:	a2 fe       	sbrs	r10, 2
     f42:	16 c0       	rjmp	.+44     	; 0xf70 <vfprintf+0x386>
     f44:	a1 fc       	sbrc	r10, 1
     f46:	03 c0       	rjmp	.+6      	; 0xf4e <vfprintf+0x364>
     f48:	88 e7       	ldi	r24, 0x78	; 120
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <vfprintf+0x368>
     f4e:	88 e5       	ldi	r24, 0x58	; 88
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	b6 01       	movw	r22, r12
     f54:	0c c0       	rjmp	.+24     	; 0xf6e <vfprintf+0x384>
     f56:	8a 2d       	mov	r24, r10
     f58:	86 78       	andi	r24, 0x86	; 134
     f5a:	51 f0       	breq	.+20     	; 0xf70 <vfprintf+0x386>
     f5c:	a1 fe       	sbrs	r10, 1
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <vfprintf+0x37a>
     f60:	8b e2       	ldi	r24, 0x2B	; 43
     f62:	01 c0       	rjmp	.+2      	; 0xf66 <vfprintf+0x37c>
     f64:	80 e2       	ldi	r24, 0x20	; 32
     f66:	a7 fc       	sbrc	r10, 7
     f68:	8d e2       	ldi	r24, 0x2D	; 45
     f6a:	b6 01       	movw	r22, r12
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	50 d0       	rcall	.+160    	; 0x1010 <fputc>
     f70:	89 14       	cp	r8, r9
     f72:	30 f4       	brcc	.+12     	; 0xf80 <vfprintf+0x396>
     f74:	b6 01       	movw	r22, r12
     f76:	80 e3       	ldi	r24, 0x30	; 48
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	4a d0       	rcall	.+148    	; 0x1010 <fputc>
     f7c:	9a 94       	dec	r9
     f7e:	f8 cf       	rjmp	.-16     	; 0xf70 <vfprintf+0x386>
     f80:	8a 94       	dec	r8
     f82:	f3 01       	movw	r30, r6
     f84:	e8 0d       	add	r30, r8
     f86:	f1 1d       	adc	r31, r1
     f88:	80 81       	ld	r24, Z
     f8a:	b6 01       	movw	r22, r12
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	40 d0       	rcall	.+128    	; 0x1010 <fputc>
     f90:	81 10       	cpse	r8, r1
     f92:	f6 cf       	rjmp	.-20     	; 0xf80 <vfprintf+0x396>
     f94:	22 20       	and	r2, r2
     f96:	09 f4       	brne	.+2      	; 0xf9a <vfprintf+0x3b0>
     f98:	4e ce       	rjmp	.-868    	; 0xc36 <vfprintf+0x4c>
     f9a:	b6 01       	movw	r22, r12
     f9c:	80 e2       	ldi	r24, 0x20	; 32
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	37 d0       	rcall	.+110    	; 0x1010 <fputc>
     fa2:	2a 94       	dec	r2
     fa4:	f7 cf       	rjmp	.-18     	; 0xf94 <vfprintf+0x3aa>
     fa6:	f6 01       	movw	r30, r12
     fa8:	86 81       	ldd	r24, Z+6	; 0x06
     faa:	97 81       	ldd	r25, Z+7	; 0x07
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <vfprintf+0x3c8>
     fae:	8f ef       	ldi	r24, 0xFF	; 255
     fb0:	9f ef       	ldi	r25, 0xFF	; 255
     fb2:	2b 96       	adiw	r28, 0x0b	; 11
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	ff 90       	pop	r15
     fc8:	ef 90       	pop	r14
     fca:	df 90       	pop	r13
     fcc:	cf 90       	pop	r12
     fce:	bf 90       	pop	r11
     fd0:	af 90       	pop	r10
     fd2:	9f 90       	pop	r9
     fd4:	8f 90       	pop	r8
     fd6:	7f 90       	pop	r7
     fd8:	6f 90       	pop	r6
     fda:	5f 90       	pop	r5
     fdc:	4f 90       	pop	r4
     fde:	3f 90       	pop	r3
     fe0:	2f 90       	pop	r2
     fe2:	08 95       	ret

00000fe4 <strnlen_P>:
     fe4:	fc 01       	movw	r30, r24
     fe6:	05 90       	lpm	r0, Z+
     fe8:	61 50       	subi	r22, 0x01	; 1
     fea:	70 40       	sbci	r23, 0x00	; 0
     fec:	01 10       	cpse	r0, r1
     fee:	d8 f7       	brcc	.-10     	; 0xfe6 <strnlen_P+0x2>
     ff0:	80 95       	com	r24
     ff2:	90 95       	com	r25
     ff4:	8e 0f       	add	r24, r30
     ff6:	9f 1f       	adc	r25, r31
     ff8:	08 95       	ret

00000ffa <strnlen>:
     ffa:	fc 01       	movw	r30, r24
     ffc:	61 50       	subi	r22, 0x01	; 1
     ffe:	70 40       	sbci	r23, 0x00	; 0
    1000:	01 90       	ld	r0, Z+
    1002:	01 10       	cpse	r0, r1
    1004:	d8 f7       	brcc	.-10     	; 0xffc <strnlen+0x2>
    1006:	80 95       	com	r24
    1008:	90 95       	com	r25
    100a:	8e 0f       	add	r24, r30
    100c:	9f 1f       	adc	r25, r31
    100e:	08 95       	ret

00001010 <fputc>:
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	fb 01       	movw	r30, r22
    101a:	23 81       	ldd	r18, Z+3	; 0x03
    101c:	21 fd       	sbrc	r18, 1
    101e:	03 c0       	rjmp	.+6      	; 0x1026 <fputc+0x16>
    1020:	8f ef       	ldi	r24, 0xFF	; 255
    1022:	9f ef       	ldi	r25, 0xFF	; 255
    1024:	2c c0       	rjmp	.+88     	; 0x107e <fputc+0x6e>
    1026:	22 ff       	sbrs	r18, 2
    1028:	16 c0       	rjmp	.+44     	; 0x1056 <fputc+0x46>
    102a:	46 81       	ldd	r20, Z+6	; 0x06
    102c:	57 81       	ldd	r21, Z+7	; 0x07
    102e:	24 81       	ldd	r18, Z+4	; 0x04
    1030:	35 81       	ldd	r19, Z+5	; 0x05
    1032:	42 17       	cp	r20, r18
    1034:	53 07       	cpc	r21, r19
    1036:	44 f4       	brge	.+16     	; 0x1048 <fputc+0x38>
    1038:	a0 81       	ld	r26, Z
    103a:	b1 81       	ldd	r27, Z+1	; 0x01
    103c:	9d 01       	movw	r18, r26
    103e:	2f 5f       	subi	r18, 0xFF	; 255
    1040:	3f 4f       	sbci	r19, 0xFF	; 255
    1042:	31 83       	std	Z+1, r19	; 0x01
    1044:	20 83       	st	Z, r18
    1046:	8c 93       	st	X, r24
    1048:	26 81       	ldd	r18, Z+6	; 0x06
    104a:	37 81       	ldd	r19, Z+7	; 0x07
    104c:	2f 5f       	subi	r18, 0xFF	; 255
    104e:	3f 4f       	sbci	r19, 0xFF	; 255
    1050:	37 83       	std	Z+7, r19	; 0x07
    1052:	26 83       	std	Z+6, r18	; 0x06
    1054:	14 c0       	rjmp	.+40     	; 0x107e <fputc+0x6e>
    1056:	8b 01       	movw	r16, r22
    1058:	ec 01       	movw	r28, r24
    105a:	fb 01       	movw	r30, r22
    105c:	00 84       	ldd	r0, Z+8	; 0x08
    105e:	f1 85       	ldd	r31, Z+9	; 0x09
    1060:	e0 2d       	mov	r30, r0
    1062:	09 95       	icall
    1064:	89 2b       	or	r24, r25
    1066:	e1 f6       	brne	.-72     	; 0x1020 <fputc+0x10>
    1068:	d8 01       	movw	r26, r16
    106a:	16 96       	adiw	r26, 0x06	; 6
    106c:	8d 91       	ld	r24, X+
    106e:	9c 91       	ld	r25, X
    1070:	17 97       	sbiw	r26, 0x07	; 7
    1072:	01 96       	adiw	r24, 0x01	; 1
    1074:	17 96       	adiw	r26, 0x07	; 7
    1076:	9c 93       	st	X, r25
    1078:	8e 93       	st	-X, r24
    107a:	16 97       	sbiw	r26, 0x06	; 6
    107c:	ce 01       	movw	r24, r28
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	08 95       	ret

00001088 <__ultoa_invert>:
    1088:	fa 01       	movw	r30, r20
    108a:	aa 27       	eor	r26, r26
    108c:	28 30       	cpi	r18, 0x08	; 8
    108e:	51 f1       	breq	.+84     	; 0x10e4 <__ultoa_invert+0x5c>
    1090:	20 31       	cpi	r18, 0x10	; 16
    1092:	81 f1       	breq	.+96     	; 0x10f4 <__ultoa_invert+0x6c>
    1094:	e8 94       	clt
    1096:	6f 93       	push	r22
    1098:	6e 7f       	andi	r22, 0xFE	; 254
    109a:	6e 5f       	subi	r22, 0xFE	; 254
    109c:	7f 4f       	sbci	r23, 0xFF	; 255
    109e:	8f 4f       	sbci	r24, 0xFF	; 255
    10a0:	9f 4f       	sbci	r25, 0xFF	; 255
    10a2:	af 4f       	sbci	r26, 0xFF	; 255
    10a4:	b1 e0       	ldi	r27, 0x01	; 1
    10a6:	3e d0       	rcall	.+124    	; 0x1124 <__stack+0x25>
    10a8:	b4 e0       	ldi	r27, 0x04	; 4
    10aa:	3c d0       	rcall	.+120    	; 0x1124 <__stack+0x25>
    10ac:	67 0f       	add	r22, r23
    10ae:	78 1f       	adc	r23, r24
    10b0:	89 1f       	adc	r24, r25
    10b2:	9a 1f       	adc	r25, r26
    10b4:	a1 1d       	adc	r26, r1
    10b6:	68 0f       	add	r22, r24
    10b8:	79 1f       	adc	r23, r25
    10ba:	8a 1f       	adc	r24, r26
    10bc:	91 1d       	adc	r25, r1
    10be:	a1 1d       	adc	r26, r1
    10c0:	6a 0f       	add	r22, r26
    10c2:	71 1d       	adc	r23, r1
    10c4:	81 1d       	adc	r24, r1
    10c6:	91 1d       	adc	r25, r1
    10c8:	a1 1d       	adc	r26, r1
    10ca:	20 d0       	rcall	.+64     	; 0x110c <__stack+0xd>
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <__ultoa_invert+0x48>
    10ce:	68 94       	set
    10d0:	3f 91       	pop	r19
    10d2:	2a e0       	ldi	r18, 0x0A	; 10
    10d4:	26 9f       	mul	r18, r22
    10d6:	11 24       	eor	r1, r1
    10d8:	30 19       	sub	r19, r0
    10da:	30 5d       	subi	r19, 0xD0	; 208
    10dc:	31 93       	st	Z+, r19
    10de:	de f6       	brtc	.-74     	; 0x1096 <__ultoa_invert+0xe>
    10e0:	cf 01       	movw	r24, r30
    10e2:	08 95       	ret
    10e4:	46 2f       	mov	r20, r22
    10e6:	47 70       	andi	r20, 0x07	; 7
    10e8:	40 5d       	subi	r20, 0xD0	; 208
    10ea:	41 93       	st	Z+, r20
    10ec:	b3 e0       	ldi	r27, 0x03	; 3
    10ee:	0f d0       	rcall	.+30     	; 0x110e <__stack+0xf>
    10f0:	c9 f7       	brne	.-14     	; 0x10e4 <__ultoa_invert+0x5c>
    10f2:	f6 cf       	rjmp	.-20     	; 0x10e0 <__ultoa_invert+0x58>
    10f4:	46 2f       	mov	r20, r22
    10f6:	4f 70       	andi	r20, 0x0F	; 15
    10f8:	40 5d       	subi	r20, 0xD0	; 208
    10fa:	4a 33       	cpi	r20, 0x3A	; 58
    10fc:	18 f0       	brcs	.+6      	; 0x1104 <__stack+0x5>
    10fe:	49 5d       	subi	r20, 0xD9	; 217
    1100:	31 fd       	sbrc	r19, 1
    1102:	40 52       	subi	r20, 0x20	; 32
    1104:	41 93       	st	Z+, r20
    1106:	02 d0       	rcall	.+4      	; 0x110c <__stack+0xd>
    1108:	a9 f7       	brne	.-22     	; 0x10f4 <__ultoa_invert+0x6c>
    110a:	ea cf       	rjmp	.-44     	; 0x10e0 <__ultoa_invert+0x58>
    110c:	b4 e0       	ldi	r27, 0x04	; 4
    110e:	a6 95       	lsr	r26
    1110:	97 95       	ror	r25
    1112:	87 95       	ror	r24
    1114:	77 95       	ror	r23
    1116:	67 95       	ror	r22
    1118:	ba 95       	dec	r27
    111a:	c9 f7       	brne	.-14     	; 0x110e <__stack+0xf>
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	61 05       	cpc	r22, r1
    1120:	71 05       	cpc	r23, r1
    1122:	08 95       	ret
    1124:	9b 01       	movw	r18, r22
    1126:	ac 01       	movw	r20, r24
    1128:	0a 2e       	mov	r0, r26
    112a:	06 94       	lsr	r0
    112c:	57 95       	ror	r21
    112e:	47 95       	ror	r20
    1130:	37 95       	ror	r19
    1132:	27 95       	ror	r18
    1134:	ba 95       	dec	r27
    1136:	c9 f7       	brne	.-14     	; 0x112a <__stack+0x2b>
    1138:	62 0f       	add	r22, r18
    113a:	73 1f       	adc	r23, r19
    113c:	84 1f       	adc	r24, r20
    113e:	95 1f       	adc	r25, r21
    1140:	a0 1d       	adc	r26, r0
    1142:	08 95       	ret

00001144 <_exit>:
    1144:	f8 94       	cli

00001146 <__stop_program>:
    1146:	ff cf       	rjmp	.-2      	; 0x1146 <__stop_program>
